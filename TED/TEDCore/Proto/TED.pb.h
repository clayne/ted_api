// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TED.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TED_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TED_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TED_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TED_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TED_2eproto;
namespace TED {
namespace Grpc {
class BreakpointResponse;
struct BreakpointResponseDefaultTypeInternal;
extern BreakpointResponseDefaultTypeInternal _BreakpointResponse_default_instance_;
class CallStack;
struct CallStackDefaultTypeInternal;
extern CallStackDefaultTypeInternal _CallStack_default_instance_;
class Context;
struct ContextDefaultTypeInternal;
extern ContextDefaultTypeInternal _Context_default_instance_;
class DebugRegisters;
struct DebugRegistersDefaultTypeInternal;
extern DebugRegistersDefaultTypeInternal _DebugRegisters_default_instance_;
class DisableBreakAllCallsInModuleRequest;
struct DisableBreakAllCallsInModuleRequestDefaultTypeInternal;
extern DisableBreakAllCallsInModuleRequestDefaultTypeInternal _DisableBreakAllCallsInModuleRequest_default_instance_;
class DisableBreakCallByAddressRequest;
struct DisableBreakCallByAddressRequestDefaultTypeInternal;
extern DisableBreakCallByAddressRequestDefaultTypeInternal _DisableBreakCallByAddressRequest_default_instance_;
class DisableBreakCallByNameRequest;
struct DisableBreakCallByNameRequestDefaultTypeInternal;
extern DisableBreakCallByNameRequestDefaultTypeInternal _DisableBreakCallByNameRequest_default_instance_;
class DisableBreakpointByAddressRequest;
struct DisableBreakpointByAddressRequestDefaultTypeInternal;
extern DisableBreakpointByAddressRequestDefaultTypeInternal _DisableBreakpointByAddressRequest_default_instance_;
class DisableBreakpointByNameRequest;
struct DisableBreakpointByNameRequestDefaultTypeInternal;
extern DisableBreakpointByNameRequestDefaultTypeInternal _DisableBreakpointByNameRequest_default_instance_;
class DisassembleAddressRequest;
struct DisassembleAddressRequestDefaultTypeInternal;
extern DisassembleAddressRequestDefaultTypeInternal _DisassembleAddressRequest_default_instance_;
class DisassembleAddressResponse;
struct DisassembleAddressResponseDefaultTypeInternal;
extern DisassembleAddressResponseDefaultTypeInternal _DisassembleAddressResponse_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class EnableBreakAllCallsInModuleRequest;
struct EnableBreakAllCallsInModuleRequestDefaultTypeInternal;
extern EnableBreakAllCallsInModuleRequestDefaultTypeInternal _EnableBreakAllCallsInModuleRequest_default_instance_;
class EnableBreakCallByAddressRequest;
struct EnableBreakCallByAddressRequestDefaultTypeInternal;
extern EnableBreakCallByAddressRequestDefaultTypeInternal _EnableBreakCallByAddressRequest_default_instance_;
class EnableBreakCallByNameRequest;
struct EnableBreakCallByNameRequestDefaultTypeInternal;
extern EnableBreakCallByNameRequestDefaultTypeInternal _EnableBreakCallByNameRequest_default_instance_;
class EnableBreakpointByAddressRequest;
struct EnableBreakpointByAddressRequestDefaultTypeInternal;
extern EnableBreakpointByAddressRequestDefaultTypeInternal _EnableBreakpointByAddressRequest_default_instance_;
class EnableBreakpointByNameRequest;
struct EnableBreakpointByNameRequestDefaultTypeInternal;
extern EnableBreakpointByNameRequestDefaultTypeInternal _EnableBreakpointByNameRequest_default_instance_;
class ExecutableSection;
struct ExecutableSectionDefaultTypeInternal;
extern ExecutableSectionDefaultTypeInternal _ExecutableSection_default_instance_;
class GeneralRegisters;
struct GeneralRegistersDefaultTypeInternal;
extern GeneralRegistersDefaultTypeInternal _GeneralRegisters_default_instance_;
class GeneralRegistersX64;
struct GeneralRegistersX64DefaultTypeInternal;
extern GeneralRegistersX64DefaultTypeInternal _GeneralRegistersX64_default_instance_;
class GenericResponse;
struct GenericResponseDefaultTypeInternal;
extern GenericResponseDefaultTypeInternal _GenericResponse_default_instance_;
class GetModulesResponse;
struct GetModulesResponseDefaultTypeInternal;
extern GetModulesResponseDefaultTypeInternal _GetModulesResponse_default_instance_;
class Instruction;
struct InstructionDefaultTypeInternal;
extern InstructionDefaultTypeInternal _Instruction_default_instance_;
class LoadModuleRequest;
struct LoadModuleRequestDefaultTypeInternal;
extern LoadModuleRequestDefaultTypeInternal _LoadModuleRequest_default_instance_;
class ModuleInfo;
struct ModuleInfoDefaultTypeInternal;
extern ModuleInfoDefaultTypeInternal _ModuleInfo_default_instance_;
class OptionsRequest;
struct OptionsRequestDefaultTypeInternal;
extern OptionsRequestDefaultTypeInternal _OptionsRequest_default_instance_;
class ReadMemoryRequest;
struct ReadMemoryRequestDefaultTypeInternal;
extern ReadMemoryRequestDefaultTypeInternal _ReadMemoryRequest_default_instance_;
class ReadMemoryResponse;
struct ReadMemoryResponseDefaultTypeInternal;
extern ReadMemoryResponseDefaultTypeInternal _ReadMemoryResponse_default_instance_;
class SegmentRegisters;
struct SegmentRegistersDefaultTypeInternal;
extern SegmentRegistersDefaultTypeInternal _SegmentRegisters_default_instance_;
class StackFrame;
struct StackFrameDefaultTypeInternal;
extern StackFrameDefaultTypeInternal _StackFrame_default_instance_;
class Symbols;
struct SymbolsDefaultTypeInternal;
extern SymbolsDefaultTypeInternal _Symbols_default_instance_;
class UnloadModuleRequest;
struct UnloadModuleRequestDefaultTypeInternal;
extern UnloadModuleRequestDefaultTypeInternal _UnloadModuleRequest_default_instance_;
class WriteMemoryRequest;
struct WriteMemoryRequestDefaultTypeInternal;
extern WriteMemoryRequestDefaultTypeInternal _WriteMemoryRequest_default_instance_;
}  // namespace Grpc
}  // namespace TED
PROTOBUF_NAMESPACE_OPEN
template<> ::TED::Grpc::BreakpointResponse* Arena::CreateMaybeMessage<::TED::Grpc::BreakpointResponse>(Arena*);
template<> ::TED::Grpc::CallStack* Arena::CreateMaybeMessage<::TED::Grpc::CallStack>(Arena*);
template<> ::TED::Grpc::Context* Arena::CreateMaybeMessage<::TED::Grpc::Context>(Arena*);
template<> ::TED::Grpc::DebugRegisters* Arena::CreateMaybeMessage<::TED::Grpc::DebugRegisters>(Arena*);
template<> ::TED::Grpc::DisableBreakAllCallsInModuleRequest* Arena::CreateMaybeMessage<::TED::Grpc::DisableBreakAllCallsInModuleRequest>(Arena*);
template<> ::TED::Grpc::DisableBreakCallByAddressRequest* Arena::CreateMaybeMessage<::TED::Grpc::DisableBreakCallByAddressRequest>(Arena*);
template<> ::TED::Grpc::DisableBreakCallByNameRequest* Arena::CreateMaybeMessage<::TED::Grpc::DisableBreakCallByNameRequest>(Arena*);
template<> ::TED::Grpc::DisableBreakpointByAddressRequest* Arena::CreateMaybeMessage<::TED::Grpc::DisableBreakpointByAddressRequest>(Arena*);
template<> ::TED::Grpc::DisableBreakpointByNameRequest* Arena::CreateMaybeMessage<::TED::Grpc::DisableBreakpointByNameRequest>(Arena*);
template<> ::TED::Grpc::DisassembleAddressRequest* Arena::CreateMaybeMessage<::TED::Grpc::DisassembleAddressRequest>(Arena*);
template<> ::TED::Grpc::DisassembleAddressResponse* Arena::CreateMaybeMessage<::TED::Grpc::DisassembleAddressResponse>(Arena*);
template<> ::TED::Grpc::Empty* Arena::CreateMaybeMessage<::TED::Grpc::Empty>(Arena*);
template<> ::TED::Grpc::EnableBreakAllCallsInModuleRequest* Arena::CreateMaybeMessage<::TED::Grpc::EnableBreakAllCallsInModuleRequest>(Arena*);
template<> ::TED::Grpc::EnableBreakCallByAddressRequest* Arena::CreateMaybeMessage<::TED::Grpc::EnableBreakCallByAddressRequest>(Arena*);
template<> ::TED::Grpc::EnableBreakCallByNameRequest* Arena::CreateMaybeMessage<::TED::Grpc::EnableBreakCallByNameRequest>(Arena*);
template<> ::TED::Grpc::EnableBreakpointByAddressRequest* Arena::CreateMaybeMessage<::TED::Grpc::EnableBreakpointByAddressRequest>(Arena*);
template<> ::TED::Grpc::EnableBreakpointByNameRequest* Arena::CreateMaybeMessage<::TED::Grpc::EnableBreakpointByNameRequest>(Arena*);
template<> ::TED::Grpc::ExecutableSection* Arena::CreateMaybeMessage<::TED::Grpc::ExecutableSection>(Arena*);
template<> ::TED::Grpc::GeneralRegisters* Arena::CreateMaybeMessage<::TED::Grpc::GeneralRegisters>(Arena*);
template<> ::TED::Grpc::GeneralRegistersX64* Arena::CreateMaybeMessage<::TED::Grpc::GeneralRegistersX64>(Arena*);
template<> ::TED::Grpc::GenericResponse* Arena::CreateMaybeMessage<::TED::Grpc::GenericResponse>(Arena*);
template<> ::TED::Grpc::GetModulesResponse* Arena::CreateMaybeMessage<::TED::Grpc::GetModulesResponse>(Arena*);
template<> ::TED::Grpc::Instruction* Arena::CreateMaybeMessage<::TED::Grpc::Instruction>(Arena*);
template<> ::TED::Grpc::LoadModuleRequest* Arena::CreateMaybeMessage<::TED::Grpc::LoadModuleRequest>(Arena*);
template<> ::TED::Grpc::ModuleInfo* Arena::CreateMaybeMessage<::TED::Grpc::ModuleInfo>(Arena*);
template<> ::TED::Grpc::OptionsRequest* Arena::CreateMaybeMessage<::TED::Grpc::OptionsRequest>(Arena*);
template<> ::TED::Grpc::ReadMemoryRequest* Arena::CreateMaybeMessage<::TED::Grpc::ReadMemoryRequest>(Arena*);
template<> ::TED::Grpc::ReadMemoryResponse* Arena::CreateMaybeMessage<::TED::Grpc::ReadMemoryResponse>(Arena*);
template<> ::TED::Grpc::SegmentRegisters* Arena::CreateMaybeMessage<::TED::Grpc::SegmentRegisters>(Arena*);
template<> ::TED::Grpc::StackFrame* Arena::CreateMaybeMessage<::TED::Grpc::StackFrame>(Arena*);
template<> ::TED::Grpc::Symbols* Arena::CreateMaybeMessage<::TED::Grpc::Symbols>(Arena*);
template<> ::TED::Grpc::UnloadModuleRequest* Arena::CreateMaybeMessage<::TED::Grpc::UnloadModuleRequest>(Arena*);
template<> ::TED::Grpc::WriteMemoryRequest* Arena::CreateMaybeMessage<::TED::Grpc::WriteMemoryRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TED {
namespace Grpc {

// ===================================================================

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TED.Grpc.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TED.Grpc.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class SegmentRegisters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.SegmentRegisters) */ {
 public:
  inline SegmentRegisters() : SegmentRegisters(nullptr) {}
  ~SegmentRegisters() override;
  explicit PROTOBUF_CONSTEXPR SegmentRegisters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentRegisters(const SegmentRegisters& from);
  SegmentRegisters(SegmentRegisters&& from) noexcept
    : SegmentRegisters() {
    *this = ::std::move(from);
  }

  inline SegmentRegisters& operator=(const SegmentRegisters& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentRegisters& operator=(SegmentRegisters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentRegisters& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentRegisters* internal_default_instance() {
    return reinterpret_cast<const SegmentRegisters*>(
               &_SegmentRegisters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SegmentRegisters& a, SegmentRegisters& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentRegisters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentRegisters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentRegisters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentRegisters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentRegisters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentRegisters& from) {
    SegmentRegisters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentRegisters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.SegmentRegisters";
  }
  protected:
  explicit SegmentRegisters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsFieldNumber = 1,
    kDsFieldNumber = 2,
    kEsFieldNumber = 3,
    kFsFieldNumber = 4,
    kGsFieldNumber = 5,
    kSsFieldNumber = 6,
  };
  // uint32 cs = 1;
  void clear_cs();
  uint32_t cs() const;
  void set_cs(uint32_t value);
  private:
  uint32_t _internal_cs() const;
  void _internal_set_cs(uint32_t value);
  public:

  // uint32 ds = 2;
  void clear_ds();
  uint32_t ds() const;
  void set_ds(uint32_t value);
  private:
  uint32_t _internal_ds() const;
  void _internal_set_ds(uint32_t value);
  public:

  // uint32 es = 3;
  void clear_es();
  uint32_t es() const;
  void set_es(uint32_t value);
  private:
  uint32_t _internal_es() const;
  void _internal_set_es(uint32_t value);
  public:

  // uint32 fs = 4;
  void clear_fs();
  uint32_t fs() const;
  void set_fs(uint32_t value);
  private:
  uint32_t _internal_fs() const;
  void _internal_set_fs(uint32_t value);
  public:

  // uint32 gs = 5;
  void clear_gs();
  uint32_t gs() const;
  void set_gs(uint32_t value);
  private:
  uint32_t _internal_gs() const;
  void _internal_set_gs(uint32_t value);
  public:

  // uint32 ss = 6;
  void clear_ss();
  uint32_t ss() const;
  void set_ss(uint32_t value);
  private:
  uint32_t _internal_ss() const;
  void _internal_set_ss(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.SegmentRegisters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t cs_;
    uint32_t ds_;
    uint32_t es_;
    uint32_t fs_;
    uint32_t gs_;
    uint32_t ss_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class DebugRegisters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.DebugRegisters) */ {
 public:
  inline DebugRegisters() : DebugRegisters(nullptr) {}
  ~DebugRegisters() override;
  explicit PROTOBUF_CONSTEXPR DebugRegisters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugRegisters(const DebugRegisters& from);
  DebugRegisters(DebugRegisters&& from) noexcept
    : DebugRegisters() {
    *this = ::std::move(from);
  }

  inline DebugRegisters& operator=(const DebugRegisters& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugRegisters& operator=(DebugRegisters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugRegisters& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugRegisters* internal_default_instance() {
    return reinterpret_cast<const DebugRegisters*>(
               &_DebugRegisters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DebugRegisters& a, DebugRegisters& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugRegisters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugRegisters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugRegisters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DebugRegisters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DebugRegisters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DebugRegisters& from) {
    DebugRegisters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugRegisters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.DebugRegisters";
  }
  protected:
  explicit DebugRegisters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDr0FieldNumber = 1,
    kDr1FieldNumber = 2,
    kDr2FieldNumber = 3,
    kDr3FieldNumber = 4,
    kDr6FieldNumber = 5,
    kDr7FieldNumber = 6,
  };
  // uint64 dr0 = 1;
  void clear_dr0();
  uint64_t dr0() const;
  void set_dr0(uint64_t value);
  private:
  uint64_t _internal_dr0() const;
  void _internal_set_dr0(uint64_t value);
  public:

  // uint64 dr1 = 2;
  void clear_dr1();
  uint64_t dr1() const;
  void set_dr1(uint64_t value);
  private:
  uint64_t _internal_dr1() const;
  void _internal_set_dr1(uint64_t value);
  public:

  // uint64 dr2 = 3;
  void clear_dr2();
  uint64_t dr2() const;
  void set_dr2(uint64_t value);
  private:
  uint64_t _internal_dr2() const;
  void _internal_set_dr2(uint64_t value);
  public:

  // uint64 dr3 = 4;
  void clear_dr3();
  uint64_t dr3() const;
  void set_dr3(uint64_t value);
  private:
  uint64_t _internal_dr3() const;
  void _internal_set_dr3(uint64_t value);
  public:

  // uint64 dr6 = 5;
  void clear_dr6();
  uint64_t dr6() const;
  void set_dr6(uint64_t value);
  private:
  uint64_t _internal_dr6() const;
  void _internal_set_dr6(uint64_t value);
  public:

  // uint64 dr7 = 6;
  void clear_dr7();
  uint64_t dr7() const;
  void set_dr7(uint64_t value);
  private:
  uint64_t _internal_dr7() const;
  void _internal_set_dr7(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.DebugRegisters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t dr0_;
    uint64_t dr1_;
    uint64_t dr2_;
    uint64_t dr3_;
    uint64_t dr6_;
    uint64_t dr7_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class GeneralRegisters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.GeneralRegisters) */ {
 public:
  inline GeneralRegisters() : GeneralRegisters(nullptr) {}
  ~GeneralRegisters() override;
  explicit PROTOBUF_CONSTEXPR GeneralRegisters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeneralRegisters(const GeneralRegisters& from);
  GeneralRegisters(GeneralRegisters&& from) noexcept
    : GeneralRegisters() {
    *this = ::std::move(from);
  }

  inline GeneralRegisters& operator=(const GeneralRegisters& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneralRegisters& operator=(GeneralRegisters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeneralRegisters& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeneralRegisters* internal_default_instance() {
    return reinterpret_cast<const GeneralRegisters*>(
               &_GeneralRegisters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GeneralRegisters& a, GeneralRegisters& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneralRegisters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeneralRegisters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeneralRegisters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeneralRegisters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GeneralRegisters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GeneralRegisters& from) {
    GeneralRegisters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralRegisters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.GeneralRegisters";
  }
  protected:
  explicit GeneralRegisters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRaxFieldNumber = 1,
    kRcxFieldNumber = 2,
    kRdxFieldNumber = 3,
    kRbxFieldNumber = 4,
    kRspFieldNumber = 5,
    kRbpFieldNumber = 6,
    kRsiFieldNumber = 7,
    kRdiFieldNumber = 8,
    kRipFieldNumber = 9,
  };
  // uint64 rax = 1;
  void clear_rax();
  uint64_t rax() const;
  void set_rax(uint64_t value);
  private:
  uint64_t _internal_rax() const;
  void _internal_set_rax(uint64_t value);
  public:

  // uint64 rcx = 2;
  void clear_rcx();
  uint64_t rcx() const;
  void set_rcx(uint64_t value);
  private:
  uint64_t _internal_rcx() const;
  void _internal_set_rcx(uint64_t value);
  public:

  // uint64 rdx = 3;
  void clear_rdx();
  uint64_t rdx() const;
  void set_rdx(uint64_t value);
  private:
  uint64_t _internal_rdx() const;
  void _internal_set_rdx(uint64_t value);
  public:

  // uint64 rbx = 4;
  void clear_rbx();
  uint64_t rbx() const;
  void set_rbx(uint64_t value);
  private:
  uint64_t _internal_rbx() const;
  void _internal_set_rbx(uint64_t value);
  public:

  // uint64 rsp = 5;
  void clear_rsp();
  uint64_t rsp() const;
  void set_rsp(uint64_t value);
  private:
  uint64_t _internal_rsp() const;
  void _internal_set_rsp(uint64_t value);
  public:

  // uint64 rbp = 6;
  void clear_rbp();
  uint64_t rbp() const;
  void set_rbp(uint64_t value);
  private:
  uint64_t _internal_rbp() const;
  void _internal_set_rbp(uint64_t value);
  public:

  // uint64 rsi = 7;
  void clear_rsi();
  uint64_t rsi() const;
  void set_rsi(uint64_t value);
  private:
  uint64_t _internal_rsi() const;
  void _internal_set_rsi(uint64_t value);
  public:

  // uint64 rdi = 8;
  void clear_rdi();
  uint64_t rdi() const;
  void set_rdi(uint64_t value);
  private:
  uint64_t _internal_rdi() const;
  void _internal_set_rdi(uint64_t value);
  public:

  // uint64 rip = 9;
  void clear_rip();
  uint64_t rip() const;
  void set_rip(uint64_t value);
  private:
  uint64_t _internal_rip() const;
  void _internal_set_rip(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.GeneralRegisters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t rax_;
    uint64_t rcx_;
    uint64_t rdx_;
    uint64_t rbx_;
    uint64_t rsp_;
    uint64_t rbp_;
    uint64_t rsi_;
    uint64_t rdi_;
    uint64_t rip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class GeneralRegistersX64 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.GeneralRegistersX64) */ {
 public:
  inline GeneralRegistersX64() : GeneralRegistersX64(nullptr) {}
  ~GeneralRegistersX64() override;
  explicit PROTOBUF_CONSTEXPR GeneralRegistersX64(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeneralRegistersX64(const GeneralRegistersX64& from);
  GeneralRegistersX64(GeneralRegistersX64&& from) noexcept
    : GeneralRegistersX64() {
    *this = ::std::move(from);
  }

  inline GeneralRegistersX64& operator=(const GeneralRegistersX64& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneralRegistersX64& operator=(GeneralRegistersX64&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeneralRegistersX64& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeneralRegistersX64* internal_default_instance() {
    return reinterpret_cast<const GeneralRegistersX64*>(
               &_GeneralRegistersX64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GeneralRegistersX64& a, GeneralRegistersX64& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneralRegistersX64* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeneralRegistersX64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeneralRegistersX64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeneralRegistersX64>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GeneralRegistersX64& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GeneralRegistersX64& from) {
    GeneralRegistersX64::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralRegistersX64* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.GeneralRegistersX64";
  }
  protected:
  explicit GeneralRegistersX64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kR8FieldNumber = 1,
    kR9FieldNumber = 2,
    kR10FieldNumber = 3,
    kR11FieldNumber = 4,
    kR12FieldNumber = 5,
    kR13FieldNumber = 6,
    kR14FieldNumber = 7,
    kR15FieldNumber = 8,
  };
  // uint64 r8 = 1;
  void clear_r8();
  uint64_t r8() const;
  void set_r8(uint64_t value);
  private:
  uint64_t _internal_r8() const;
  void _internal_set_r8(uint64_t value);
  public:

  // uint64 r9 = 2;
  void clear_r9();
  uint64_t r9() const;
  void set_r9(uint64_t value);
  private:
  uint64_t _internal_r9() const;
  void _internal_set_r9(uint64_t value);
  public:

  // uint64 r10 = 3;
  void clear_r10();
  uint64_t r10() const;
  void set_r10(uint64_t value);
  private:
  uint64_t _internal_r10() const;
  void _internal_set_r10(uint64_t value);
  public:

  // uint64 r11 = 4;
  void clear_r11();
  uint64_t r11() const;
  void set_r11(uint64_t value);
  private:
  uint64_t _internal_r11() const;
  void _internal_set_r11(uint64_t value);
  public:

  // uint64 r12 = 5;
  void clear_r12();
  uint64_t r12() const;
  void set_r12(uint64_t value);
  private:
  uint64_t _internal_r12() const;
  void _internal_set_r12(uint64_t value);
  public:

  // uint64 r13 = 6;
  void clear_r13();
  uint64_t r13() const;
  void set_r13(uint64_t value);
  private:
  uint64_t _internal_r13() const;
  void _internal_set_r13(uint64_t value);
  public:

  // uint64 r14 = 7;
  void clear_r14();
  uint64_t r14() const;
  void set_r14(uint64_t value);
  private:
  uint64_t _internal_r14() const;
  void _internal_set_r14(uint64_t value);
  public:

  // uint64 r15 = 8;
  void clear_r15();
  uint64_t r15() const;
  void set_r15(uint64_t value);
  private:
  uint64_t _internal_r15() const;
  void _internal_set_r15(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.GeneralRegistersX64)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t r8_;
    uint64_t r9_;
    uint64_t r10_;
    uint64_t r11_;
    uint64_t r12_;
    uint64_t r13_;
    uint64_t r14_;
    uint64_t r15_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class Context final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.Context) */ {
 public:
  inline Context() : Context(nullptr) {}
  ~Context() override;
  explicit PROTOBUF_CONSTEXPR Context(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Context(const Context& from);
  Context(Context&& from) noexcept
    : Context() {
    *this = ::std::move(from);
  }

  inline Context& operator=(const Context& from) {
    CopyFrom(from);
    return *this;
  }
  inline Context& operator=(Context&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Context& default_instance() {
    return *internal_default_instance();
  }
  static inline const Context* internal_default_instance() {
    return reinterpret_cast<const Context*>(
               &_Context_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Context& a, Context& b) {
    a.Swap(&b);
  }
  inline void Swap(Context* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Context* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Context* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Context>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Context& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Context& from) {
    Context::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Context* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.Context";
  }
  protected:
  explicit Context(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentRegistersFieldNumber = 1,
    kDebugRegistersFieldNumber = 2,
    kGeneralRegistersFieldNumber = 3,
    kGeneralRegistersX64FieldNumber = 4,
    kProcessorFlagsFieldNumber = 5,
  };
  // .TED.Grpc.SegmentRegisters segment_registers = 1;
  bool has_segment_registers() const;
  private:
  bool _internal_has_segment_registers() const;
  public:
  void clear_segment_registers();
  const ::TED::Grpc::SegmentRegisters& segment_registers() const;
  PROTOBUF_NODISCARD ::TED::Grpc::SegmentRegisters* release_segment_registers();
  ::TED::Grpc::SegmentRegisters* mutable_segment_registers();
  void set_allocated_segment_registers(::TED::Grpc::SegmentRegisters* segment_registers);
  private:
  const ::TED::Grpc::SegmentRegisters& _internal_segment_registers() const;
  ::TED::Grpc::SegmentRegisters* _internal_mutable_segment_registers();
  public:
  void unsafe_arena_set_allocated_segment_registers(
      ::TED::Grpc::SegmentRegisters* segment_registers);
  ::TED::Grpc::SegmentRegisters* unsafe_arena_release_segment_registers();

  // .TED.Grpc.DebugRegisters debug_registers = 2;
  bool has_debug_registers() const;
  private:
  bool _internal_has_debug_registers() const;
  public:
  void clear_debug_registers();
  const ::TED::Grpc::DebugRegisters& debug_registers() const;
  PROTOBUF_NODISCARD ::TED::Grpc::DebugRegisters* release_debug_registers();
  ::TED::Grpc::DebugRegisters* mutable_debug_registers();
  void set_allocated_debug_registers(::TED::Grpc::DebugRegisters* debug_registers);
  private:
  const ::TED::Grpc::DebugRegisters& _internal_debug_registers() const;
  ::TED::Grpc::DebugRegisters* _internal_mutable_debug_registers();
  public:
  void unsafe_arena_set_allocated_debug_registers(
      ::TED::Grpc::DebugRegisters* debug_registers);
  ::TED::Grpc::DebugRegisters* unsafe_arena_release_debug_registers();

  // .TED.Grpc.GeneralRegisters general_registers = 3;
  bool has_general_registers() const;
  private:
  bool _internal_has_general_registers() const;
  public:
  void clear_general_registers();
  const ::TED::Grpc::GeneralRegisters& general_registers() const;
  PROTOBUF_NODISCARD ::TED::Grpc::GeneralRegisters* release_general_registers();
  ::TED::Grpc::GeneralRegisters* mutable_general_registers();
  void set_allocated_general_registers(::TED::Grpc::GeneralRegisters* general_registers);
  private:
  const ::TED::Grpc::GeneralRegisters& _internal_general_registers() const;
  ::TED::Grpc::GeneralRegisters* _internal_mutable_general_registers();
  public:
  void unsafe_arena_set_allocated_general_registers(
      ::TED::Grpc::GeneralRegisters* general_registers);
  ::TED::Grpc::GeneralRegisters* unsafe_arena_release_general_registers();

  // .TED.Grpc.GeneralRegistersX64 general_registers_x64 = 4;
  bool has_general_registers_x64() const;
  private:
  bool _internal_has_general_registers_x64() const;
  public:
  void clear_general_registers_x64();
  const ::TED::Grpc::GeneralRegistersX64& general_registers_x64() const;
  PROTOBUF_NODISCARD ::TED::Grpc::GeneralRegistersX64* release_general_registers_x64();
  ::TED::Grpc::GeneralRegistersX64* mutable_general_registers_x64();
  void set_allocated_general_registers_x64(::TED::Grpc::GeneralRegistersX64* general_registers_x64);
  private:
  const ::TED::Grpc::GeneralRegistersX64& _internal_general_registers_x64() const;
  ::TED::Grpc::GeneralRegistersX64* _internal_mutable_general_registers_x64();
  public:
  void unsafe_arena_set_allocated_general_registers_x64(
      ::TED::Grpc::GeneralRegistersX64* general_registers_x64);
  ::TED::Grpc::GeneralRegistersX64* unsafe_arena_release_general_registers_x64();

  // int32 processor_flags = 5;
  void clear_processor_flags();
  int32_t processor_flags() const;
  void set_processor_flags(int32_t value);
  private:
  int32_t _internal_processor_flags() const;
  void _internal_set_processor_flags(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.Context)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::TED::Grpc::SegmentRegisters* segment_registers_;
    ::TED::Grpc::DebugRegisters* debug_registers_;
    ::TED::Grpc::GeneralRegisters* general_registers_;
    ::TED::Grpc::GeneralRegistersX64* general_registers_x64_;
    int32_t processor_flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class Symbols final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.Symbols) */ {
 public:
  inline Symbols() : Symbols(nullptr) {}
  ~Symbols() override;
  explicit PROTOBUF_CONSTEXPR Symbols(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Symbols(const Symbols& from);
  Symbols(Symbols&& from) noexcept
    : Symbols() {
    *this = ::std::move(from);
  }

  inline Symbols& operator=(const Symbols& from) {
    CopyFrom(from);
    return *this;
  }
  inline Symbols& operator=(Symbols&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Symbols& default_instance() {
    return *internal_default_instance();
  }
  static inline const Symbols* internal_default_instance() {
    return reinterpret_cast<const Symbols*>(
               &_Symbols_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Symbols& a, Symbols& b) {
    a.Swap(&b);
  }
  inline void Swap(Symbols* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Symbols* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Symbols* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Symbols>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Symbols& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Symbols& from) {
    Symbols::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Symbols* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.Symbols";
  }
  protected:
  explicit Symbols(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 1,
  };
  // string function_name = 1;
  void clear_function_name();
  const std::string& function_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function_name();
  PROTOBUF_NODISCARD std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.Symbols)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class StackFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.StackFrame) */ {
 public:
  inline StackFrame() : StackFrame(nullptr) {}
  ~StackFrame() override;
  explicit PROTOBUF_CONSTEXPR StackFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StackFrame(const StackFrame& from);
  StackFrame(StackFrame&& from) noexcept
    : StackFrame() {
    *this = ::std::move(from);
  }

  inline StackFrame& operator=(const StackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline StackFrame& operator=(StackFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StackFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const StackFrame* internal_default_instance() {
    return reinterpret_cast<const StackFrame*>(
               &_StackFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StackFrame& a, StackFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(StackFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StackFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StackFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StackFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StackFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StackFrame& from) {
    StackFrame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.StackFrame";
  }
  protected:
  explicit StackFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 5,
    kSymbolsFieldNumber = 6,
    kRipFieldNumber = 1,
    kReturnAddressFieldNumber = 2,
    kFramePointerFieldNumber = 3,
    kStackPointerFieldNumber = 4,
  };
  // repeated uint64 parameters = 5;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  private:
  uint64_t _internal_parameters(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_parameters() const;
  void _internal_add_parameters(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_parameters();
  public:
  uint64_t parameters(int index) const;
  void set_parameters(int index, uint64_t value);
  void add_parameters(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      parameters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_parameters();

  // .TED.Grpc.Symbols symbols = 6;
  bool has_symbols() const;
  private:
  bool _internal_has_symbols() const;
  public:
  void clear_symbols();
  const ::TED::Grpc::Symbols& symbols() const;
  PROTOBUF_NODISCARD ::TED::Grpc::Symbols* release_symbols();
  ::TED::Grpc::Symbols* mutable_symbols();
  void set_allocated_symbols(::TED::Grpc::Symbols* symbols);
  private:
  const ::TED::Grpc::Symbols& _internal_symbols() const;
  ::TED::Grpc::Symbols* _internal_mutable_symbols();
  public:
  void unsafe_arena_set_allocated_symbols(
      ::TED::Grpc::Symbols* symbols);
  ::TED::Grpc::Symbols* unsafe_arena_release_symbols();

  // uint64 rip = 1;
  void clear_rip();
  uint64_t rip() const;
  void set_rip(uint64_t value);
  private:
  uint64_t _internal_rip() const;
  void _internal_set_rip(uint64_t value);
  public:

  // uint64 return_address = 2;
  void clear_return_address();
  uint64_t return_address() const;
  void set_return_address(uint64_t value);
  private:
  uint64_t _internal_return_address() const;
  void _internal_set_return_address(uint64_t value);
  public:

  // uint64 frame_pointer = 3;
  void clear_frame_pointer();
  uint64_t frame_pointer() const;
  void set_frame_pointer(uint64_t value);
  private:
  uint64_t _internal_frame_pointer() const;
  void _internal_set_frame_pointer(uint64_t value);
  public:

  // uint64 stack_pointer = 4;
  void clear_stack_pointer();
  uint64_t stack_pointer() const;
  void set_stack_pointer(uint64_t value);
  private:
  uint64_t _internal_stack_pointer() const;
  void _internal_set_stack_pointer(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.StackFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > parameters_;
    mutable std::atomic<int> _parameters_cached_byte_size_;
    ::TED::Grpc::Symbols* symbols_;
    uint64_t rip_;
    uint64_t return_address_;
    uint64_t frame_pointer_;
    uint64_t stack_pointer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class CallStack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.CallStack) */ {
 public:
  inline CallStack() : CallStack(nullptr) {}
  ~CallStack() override;
  explicit PROTOBUF_CONSTEXPR CallStack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallStack(const CallStack& from);
  CallStack(CallStack&& from) noexcept
    : CallStack() {
    *this = ::std::move(from);
  }

  inline CallStack& operator=(const CallStack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallStack& operator=(CallStack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallStack& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallStack* internal_default_instance() {
    return reinterpret_cast<const CallStack*>(
               &_CallStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CallStack& a, CallStack& b) {
    a.Swap(&b);
  }
  inline void Swap(CallStack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallStack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallStack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallStack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallStack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CallStack& from) {
    CallStack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallStack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.CallStack";
  }
  protected:
  explicit CallStack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStackFrameFieldNumber = 1,
  };
  // repeated .TED.Grpc.StackFrame stack_frame = 1;
  int stack_frame_size() const;
  private:
  int _internal_stack_frame_size() const;
  public:
  void clear_stack_frame();
  ::TED::Grpc::StackFrame* mutable_stack_frame(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::StackFrame >*
      mutable_stack_frame();
  private:
  const ::TED::Grpc::StackFrame& _internal_stack_frame(int index) const;
  ::TED::Grpc::StackFrame* _internal_add_stack_frame();
  public:
  const ::TED::Grpc::StackFrame& stack_frame(int index) const;
  ::TED::Grpc::StackFrame* add_stack_frame();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::StackFrame >&
      stack_frame() const;

  // @@protoc_insertion_point(class_scope:TED.Grpc.CallStack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::StackFrame > stack_frame_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class BreakpointResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.BreakpointResponse) */ {
 public:
  inline BreakpointResponse() : BreakpointResponse(nullptr) {}
  ~BreakpointResponse() override;
  explicit PROTOBUF_CONSTEXPR BreakpointResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BreakpointResponse(const BreakpointResponse& from);
  BreakpointResponse(BreakpointResponse&& from) noexcept
    : BreakpointResponse() {
    *this = ::std::move(from);
  }

  inline BreakpointResponse& operator=(const BreakpointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BreakpointResponse& operator=(BreakpointResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BreakpointResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BreakpointResponse* internal_default_instance() {
    return reinterpret_cast<const BreakpointResponse*>(
               &_BreakpointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BreakpointResponse& a, BreakpointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BreakpointResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BreakpointResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BreakpointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BreakpointResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BreakpointResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BreakpointResponse& from) {
    BreakpointResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BreakpointResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.BreakpointResponse";
  }
  protected:
  explicit BreakpointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 5,
    kCallStackFieldNumber = 6,
    kProcessIdFieldNumber = 1,
    kThreadIdFieldNumber = 2,
    kSourceAddressFieldNumber = 3,
    kDestinationAddressFieldNumber = 4,
  };
  // .TED.Grpc.Context context = 5;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::TED::Grpc::Context& context() const;
  PROTOBUF_NODISCARD ::TED::Grpc::Context* release_context();
  ::TED::Grpc::Context* mutable_context();
  void set_allocated_context(::TED::Grpc::Context* context);
  private:
  const ::TED::Grpc::Context& _internal_context() const;
  ::TED::Grpc::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::TED::Grpc::Context* context);
  ::TED::Grpc::Context* unsafe_arena_release_context();

  // .TED.Grpc.CallStack call_stack = 6;
  bool has_call_stack() const;
  private:
  bool _internal_has_call_stack() const;
  public:
  void clear_call_stack();
  const ::TED::Grpc::CallStack& call_stack() const;
  PROTOBUF_NODISCARD ::TED::Grpc::CallStack* release_call_stack();
  ::TED::Grpc::CallStack* mutable_call_stack();
  void set_allocated_call_stack(::TED::Grpc::CallStack* call_stack);
  private:
  const ::TED::Grpc::CallStack& _internal_call_stack() const;
  ::TED::Grpc::CallStack* _internal_mutable_call_stack();
  public:
  void unsafe_arena_set_allocated_call_stack(
      ::TED::Grpc::CallStack* call_stack);
  ::TED::Grpc::CallStack* unsafe_arena_release_call_stack();

  // uint32 process_id = 1;
  void clear_process_id();
  uint32_t process_id() const;
  void set_process_id(uint32_t value);
  private:
  uint32_t _internal_process_id() const;
  void _internal_set_process_id(uint32_t value);
  public:

  // uint32 thread_id = 2;
  void clear_thread_id();
  uint32_t thread_id() const;
  void set_thread_id(uint32_t value);
  private:
  uint32_t _internal_thread_id() const;
  void _internal_set_thread_id(uint32_t value);
  public:

  // uint64 source_address = 3;
  void clear_source_address();
  uint64_t source_address() const;
  void set_source_address(uint64_t value);
  private:
  uint64_t _internal_source_address() const;
  void _internal_set_source_address(uint64_t value);
  public:

  // uint64 destination_address = 4;
  void clear_destination_address();
  uint64_t destination_address() const;
  void set_destination_address(uint64_t value);
  private:
  uint64_t _internal_destination_address() const;
  void _internal_set_destination_address(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.BreakpointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::TED::Grpc::Context* context_;
    ::TED::Grpc::CallStack* call_stack_;
    uint32_t process_id_;
    uint32_t thread_id_;
    uint64_t source_address_;
    uint64_t destination_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class ExecutableSection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.ExecutableSection) */ {
 public:
  inline ExecutableSection() : ExecutableSection(nullptr) {}
  ~ExecutableSection() override;
  explicit PROTOBUF_CONSTEXPR ExecutableSection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutableSection(const ExecutableSection& from);
  ExecutableSection(ExecutableSection&& from) noexcept
    : ExecutableSection() {
    *this = ::std::move(from);
  }

  inline ExecutableSection& operator=(const ExecutableSection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutableSection& operator=(ExecutableSection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutableSection& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutableSection* internal_default_instance() {
    return reinterpret_cast<const ExecutableSection*>(
               &_ExecutableSection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ExecutableSection& a, ExecutableSection& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutableSection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutableSection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecutableSection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecutableSection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecutableSection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExecutableSection& from) {
    ExecutableSection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutableSection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.ExecutableSection";
  }
  protected:
  explicit ExecutableSection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAddressFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 address = 2;
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // uint64 size = 3;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.ExecutableSection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t address_;
    uint64_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class ModuleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.ModuleInfo) */ {
 public:
  inline ModuleInfo() : ModuleInfo(nullptr) {}
  ~ModuleInfo() override;
  explicit PROTOBUF_CONSTEXPR ModuleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleInfo(const ModuleInfo& from);
  ModuleInfo(ModuleInfo&& from) noexcept
    : ModuleInfo() {
    *this = ::std::move(from);
  }

  inline ModuleInfo& operator=(const ModuleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleInfo& operator=(ModuleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleInfo* internal_default_instance() {
    return reinterpret_cast<const ModuleInfo*>(
               &_ModuleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ModuleInfo& a, ModuleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModuleInfo& from) {
    ModuleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.ModuleInfo";
  }
  protected:
  explicit ModuleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExecutableSectionsFieldNumber = 4,
    kNameFieldNumber = 1,
    kBaseAddressFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // repeated .TED.Grpc.ExecutableSection executable_sections = 4;
  int executable_sections_size() const;
  private:
  int _internal_executable_sections_size() const;
  public:
  void clear_executable_sections();
  ::TED::Grpc::ExecutableSection* mutable_executable_sections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::ExecutableSection >*
      mutable_executable_sections();
  private:
  const ::TED::Grpc::ExecutableSection& _internal_executable_sections(int index) const;
  ::TED::Grpc::ExecutableSection* _internal_add_executable_sections();
  public:
  const ::TED::Grpc::ExecutableSection& executable_sections(int index) const;
  ::TED::Grpc::ExecutableSection* add_executable_sections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::ExecutableSection >&
      executable_sections() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 base_address = 2;
  void clear_base_address();
  uint64_t base_address() const;
  void set_base_address(uint64_t value);
  private:
  uint64_t _internal_base_address() const;
  void _internal_set_base_address(uint64_t value);
  public:

  // uint64 size = 3;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.ModuleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::ExecutableSection > executable_sections_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t base_address_;
    uint64_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class GetModulesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.GetModulesResponse) */ {
 public:
  inline GetModulesResponse() : GetModulesResponse(nullptr) {}
  ~GetModulesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetModulesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModulesResponse(const GetModulesResponse& from);
  GetModulesResponse(GetModulesResponse&& from) noexcept
    : GetModulesResponse() {
    *this = ::std::move(from);
  }

  inline GetModulesResponse& operator=(const GetModulesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModulesResponse& operator=(GetModulesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModulesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModulesResponse* internal_default_instance() {
    return reinterpret_cast<const GetModulesResponse*>(
               &_GetModulesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetModulesResponse& a, GetModulesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModulesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModulesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModulesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModulesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModulesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetModulesResponse& from) {
    GetModulesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModulesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.GetModulesResponse";
  }
  protected:
  explicit GetModulesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleInfoFieldNumber = 1,
  };
  // repeated .TED.Grpc.ModuleInfo module_info = 1;
  int module_info_size() const;
  private:
  int _internal_module_info_size() const;
  public:
  void clear_module_info();
  ::TED::Grpc::ModuleInfo* mutable_module_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::ModuleInfo >*
      mutable_module_info();
  private:
  const ::TED::Grpc::ModuleInfo& _internal_module_info(int index) const;
  ::TED::Grpc::ModuleInfo* _internal_add_module_info();
  public:
  const ::TED::Grpc::ModuleInfo& module_info(int index) const;
  ::TED::Grpc::ModuleInfo* add_module_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::ModuleInfo >&
      module_info() const;

  // @@protoc_insertion_point(class_scope:TED.Grpc.GetModulesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::ModuleInfo > module_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class EnableBreakAllCallsInModuleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.EnableBreakAllCallsInModuleRequest) */ {
 public:
  inline EnableBreakAllCallsInModuleRequest() : EnableBreakAllCallsInModuleRequest(nullptr) {}
  ~EnableBreakAllCallsInModuleRequest() override;
  explicit PROTOBUF_CONSTEXPR EnableBreakAllCallsInModuleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableBreakAllCallsInModuleRequest(const EnableBreakAllCallsInModuleRequest& from);
  EnableBreakAllCallsInModuleRequest(EnableBreakAllCallsInModuleRequest&& from) noexcept
    : EnableBreakAllCallsInModuleRequest() {
    *this = ::std::move(from);
  }

  inline EnableBreakAllCallsInModuleRequest& operator=(const EnableBreakAllCallsInModuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableBreakAllCallsInModuleRequest& operator=(EnableBreakAllCallsInModuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnableBreakAllCallsInModuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableBreakAllCallsInModuleRequest* internal_default_instance() {
    return reinterpret_cast<const EnableBreakAllCallsInModuleRequest*>(
               &_EnableBreakAllCallsInModuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EnableBreakAllCallsInModuleRequest& a, EnableBreakAllCallsInModuleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableBreakAllCallsInModuleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableBreakAllCallsInModuleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableBreakAllCallsInModuleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableBreakAllCallsInModuleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnableBreakAllCallsInModuleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnableBreakAllCallsInModuleRequest& from) {
    EnableBreakAllCallsInModuleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableBreakAllCallsInModuleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.EnableBreakAllCallsInModuleRequest";
  }
  protected:
  explicit EnableBreakAllCallsInModuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 1,
  };
  // string module_name = 1;
  void clear_module_name();
  const std::string& module_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* module_name);
  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(const std::string& value);
  std::string* _internal_mutable_module_name();
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.EnableBreakAllCallsInModuleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class DisableBreakAllCallsInModuleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.DisableBreakAllCallsInModuleRequest) */ {
 public:
  inline DisableBreakAllCallsInModuleRequest() : DisableBreakAllCallsInModuleRequest(nullptr) {}
  ~DisableBreakAllCallsInModuleRequest() override;
  explicit PROTOBUF_CONSTEXPR DisableBreakAllCallsInModuleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableBreakAllCallsInModuleRequest(const DisableBreakAllCallsInModuleRequest& from);
  DisableBreakAllCallsInModuleRequest(DisableBreakAllCallsInModuleRequest&& from) noexcept
    : DisableBreakAllCallsInModuleRequest() {
    *this = ::std::move(from);
  }

  inline DisableBreakAllCallsInModuleRequest& operator=(const DisableBreakAllCallsInModuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableBreakAllCallsInModuleRequest& operator=(DisableBreakAllCallsInModuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisableBreakAllCallsInModuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableBreakAllCallsInModuleRequest* internal_default_instance() {
    return reinterpret_cast<const DisableBreakAllCallsInModuleRequest*>(
               &_DisableBreakAllCallsInModuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DisableBreakAllCallsInModuleRequest& a, DisableBreakAllCallsInModuleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableBreakAllCallsInModuleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableBreakAllCallsInModuleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableBreakAllCallsInModuleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableBreakAllCallsInModuleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisableBreakAllCallsInModuleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisableBreakAllCallsInModuleRequest& from) {
    DisableBreakAllCallsInModuleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableBreakAllCallsInModuleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.DisableBreakAllCallsInModuleRequest";
  }
  protected:
  explicit DisableBreakAllCallsInModuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 1,
  };
  // string module_name = 1;
  void clear_module_name();
  const std::string& module_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* module_name);
  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(const std::string& value);
  std::string* _internal_mutable_module_name();
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.DisableBreakAllCallsInModuleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class EnableBreakCallByAddressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.EnableBreakCallByAddressRequest) */ {
 public:
  inline EnableBreakCallByAddressRequest() : EnableBreakCallByAddressRequest(nullptr) {}
  ~EnableBreakCallByAddressRequest() override;
  explicit PROTOBUF_CONSTEXPR EnableBreakCallByAddressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableBreakCallByAddressRequest(const EnableBreakCallByAddressRequest& from);
  EnableBreakCallByAddressRequest(EnableBreakCallByAddressRequest&& from) noexcept
    : EnableBreakCallByAddressRequest() {
    *this = ::std::move(from);
  }

  inline EnableBreakCallByAddressRequest& operator=(const EnableBreakCallByAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableBreakCallByAddressRequest& operator=(EnableBreakCallByAddressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnableBreakCallByAddressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableBreakCallByAddressRequest* internal_default_instance() {
    return reinterpret_cast<const EnableBreakCallByAddressRequest*>(
               &_EnableBreakCallByAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EnableBreakCallByAddressRequest& a, EnableBreakCallByAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableBreakCallByAddressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableBreakCallByAddressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableBreakCallByAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableBreakCallByAddressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnableBreakCallByAddressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnableBreakCallByAddressRequest& from) {
    EnableBreakCallByAddressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableBreakCallByAddressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.EnableBreakCallByAddressRequest";
  }
  protected:
  explicit EnableBreakCallByAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // uint64 address = 1;
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.EnableBreakCallByAddressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class DisableBreakCallByAddressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.DisableBreakCallByAddressRequest) */ {
 public:
  inline DisableBreakCallByAddressRequest() : DisableBreakCallByAddressRequest(nullptr) {}
  ~DisableBreakCallByAddressRequest() override;
  explicit PROTOBUF_CONSTEXPR DisableBreakCallByAddressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableBreakCallByAddressRequest(const DisableBreakCallByAddressRequest& from);
  DisableBreakCallByAddressRequest(DisableBreakCallByAddressRequest&& from) noexcept
    : DisableBreakCallByAddressRequest() {
    *this = ::std::move(from);
  }

  inline DisableBreakCallByAddressRequest& operator=(const DisableBreakCallByAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableBreakCallByAddressRequest& operator=(DisableBreakCallByAddressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisableBreakCallByAddressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableBreakCallByAddressRequest* internal_default_instance() {
    return reinterpret_cast<const DisableBreakCallByAddressRequest*>(
               &_DisableBreakCallByAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DisableBreakCallByAddressRequest& a, DisableBreakCallByAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableBreakCallByAddressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableBreakCallByAddressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableBreakCallByAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableBreakCallByAddressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisableBreakCallByAddressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisableBreakCallByAddressRequest& from) {
    DisableBreakCallByAddressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableBreakCallByAddressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.DisableBreakCallByAddressRequest";
  }
  protected:
  explicit DisableBreakCallByAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // uint64 address = 1;
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.DisableBreakCallByAddressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class EnableBreakCallByNameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.EnableBreakCallByNameRequest) */ {
 public:
  inline EnableBreakCallByNameRequest() : EnableBreakCallByNameRequest(nullptr) {}
  ~EnableBreakCallByNameRequest() override;
  explicit PROTOBUF_CONSTEXPR EnableBreakCallByNameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableBreakCallByNameRequest(const EnableBreakCallByNameRequest& from);
  EnableBreakCallByNameRequest(EnableBreakCallByNameRequest&& from) noexcept
    : EnableBreakCallByNameRequest() {
    *this = ::std::move(from);
  }

  inline EnableBreakCallByNameRequest& operator=(const EnableBreakCallByNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableBreakCallByNameRequest& operator=(EnableBreakCallByNameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnableBreakCallByNameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableBreakCallByNameRequest* internal_default_instance() {
    return reinterpret_cast<const EnableBreakCallByNameRequest*>(
               &_EnableBreakCallByNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(EnableBreakCallByNameRequest& a, EnableBreakCallByNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableBreakCallByNameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableBreakCallByNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableBreakCallByNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableBreakCallByNameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnableBreakCallByNameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnableBreakCallByNameRequest& from) {
    EnableBreakCallByNameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableBreakCallByNameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.EnableBreakCallByNameRequest";
  }
  protected:
  explicit EnableBreakCallByNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.EnableBreakCallByNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class DisableBreakCallByNameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.DisableBreakCallByNameRequest) */ {
 public:
  inline DisableBreakCallByNameRequest() : DisableBreakCallByNameRequest(nullptr) {}
  ~DisableBreakCallByNameRequest() override;
  explicit PROTOBUF_CONSTEXPR DisableBreakCallByNameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableBreakCallByNameRequest(const DisableBreakCallByNameRequest& from);
  DisableBreakCallByNameRequest(DisableBreakCallByNameRequest&& from) noexcept
    : DisableBreakCallByNameRequest() {
    *this = ::std::move(from);
  }

  inline DisableBreakCallByNameRequest& operator=(const DisableBreakCallByNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableBreakCallByNameRequest& operator=(DisableBreakCallByNameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisableBreakCallByNameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableBreakCallByNameRequest* internal_default_instance() {
    return reinterpret_cast<const DisableBreakCallByNameRequest*>(
               &_DisableBreakCallByNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DisableBreakCallByNameRequest& a, DisableBreakCallByNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableBreakCallByNameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableBreakCallByNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableBreakCallByNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableBreakCallByNameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisableBreakCallByNameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisableBreakCallByNameRequest& from) {
    DisableBreakCallByNameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableBreakCallByNameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.DisableBreakCallByNameRequest";
  }
  protected:
  explicit DisableBreakCallByNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.DisableBreakCallByNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class EnableBreakpointByAddressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.EnableBreakpointByAddressRequest) */ {
 public:
  inline EnableBreakpointByAddressRequest() : EnableBreakpointByAddressRequest(nullptr) {}
  ~EnableBreakpointByAddressRequest() override;
  explicit PROTOBUF_CONSTEXPR EnableBreakpointByAddressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableBreakpointByAddressRequest(const EnableBreakpointByAddressRequest& from);
  EnableBreakpointByAddressRequest(EnableBreakpointByAddressRequest&& from) noexcept
    : EnableBreakpointByAddressRequest() {
    *this = ::std::move(from);
  }

  inline EnableBreakpointByAddressRequest& operator=(const EnableBreakpointByAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableBreakpointByAddressRequest& operator=(EnableBreakpointByAddressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnableBreakpointByAddressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableBreakpointByAddressRequest* internal_default_instance() {
    return reinterpret_cast<const EnableBreakpointByAddressRequest*>(
               &_EnableBreakpointByAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(EnableBreakpointByAddressRequest& a, EnableBreakpointByAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableBreakpointByAddressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableBreakpointByAddressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableBreakpointByAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableBreakpointByAddressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnableBreakpointByAddressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnableBreakpointByAddressRequest& from) {
    EnableBreakpointByAddressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableBreakpointByAddressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.EnableBreakpointByAddressRequest";
  }
  protected:
  explicit EnableBreakpointByAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // uint64 address = 1;
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.EnableBreakpointByAddressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class DisableBreakpointByAddressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.DisableBreakpointByAddressRequest) */ {
 public:
  inline DisableBreakpointByAddressRequest() : DisableBreakpointByAddressRequest(nullptr) {}
  ~DisableBreakpointByAddressRequest() override;
  explicit PROTOBUF_CONSTEXPR DisableBreakpointByAddressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableBreakpointByAddressRequest(const DisableBreakpointByAddressRequest& from);
  DisableBreakpointByAddressRequest(DisableBreakpointByAddressRequest&& from) noexcept
    : DisableBreakpointByAddressRequest() {
    *this = ::std::move(from);
  }

  inline DisableBreakpointByAddressRequest& operator=(const DisableBreakpointByAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableBreakpointByAddressRequest& operator=(DisableBreakpointByAddressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisableBreakpointByAddressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableBreakpointByAddressRequest* internal_default_instance() {
    return reinterpret_cast<const DisableBreakpointByAddressRequest*>(
               &_DisableBreakpointByAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DisableBreakpointByAddressRequest& a, DisableBreakpointByAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableBreakpointByAddressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableBreakpointByAddressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableBreakpointByAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableBreakpointByAddressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisableBreakpointByAddressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisableBreakpointByAddressRequest& from) {
    DisableBreakpointByAddressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableBreakpointByAddressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.DisableBreakpointByAddressRequest";
  }
  protected:
  explicit DisableBreakpointByAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // uint64 address = 1;
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.DisableBreakpointByAddressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class EnableBreakpointByNameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.EnableBreakpointByNameRequest) */ {
 public:
  inline EnableBreakpointByNameRequest() : EnableBreakpointByNameRequest(nullptr) {}
  ~EnableBreakpointByNameRequest() override;
  explicit PROTOBUF_CONSTEXPR EnableBreakpointByNameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableBreakpointByNameRequest(const EnableBreakpointByNameRequest& from);
  EnableBreakpointByNameRequest(EnableBreakpointByNameRequest&& from) noexcept
    : EnableBreakpointByNameRequest() {
    *this = ::std::move(from);
  }

  inline EnableBreakpointByNameRequest& operator=(const EnableBreakpointByNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableBreakpointByNameRequest& operator=(EnableBreakpointByNameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnableBreakpointByNameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableBreakpointByNameRequest* internal_default_instance() {
    return reinterpret_cast<const EnableBreakpointByNameRequest*>(
               &_EnableBreakpointByNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(EnableBreakpointByNameRequest& a, EnableBreakpointByNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableBreakpointByNameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableBreakpointByNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableBreakpointByNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableBreakpointByNameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnableBreakpointByNameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnableBreakpointByNameRequest& from) {
    EnableBreakpointByNameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableBreakpointByNameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.EnableBreakpointByNameRequest";
  }
  protected:
  explicit EnableBreakpointByNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.EnableBreakpointByNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class DisableBreakpointByNameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.DisableBreakpointByNameRequest) */ {
 public:
  inline DisableBreakpointByNameRequest() : DisableBreakpointByNameRequest(nullptr) {}
  ~DisableBreakpointByNameRequest() override;
  explicit PROTOBUF_CONSTEXPR DisableBreakpointByNameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableBreakpointByNameRequest(const DisableBreakpointByNameRequest& from);
  DisableBreakpointByNameRequest(DisableBreakpointByNameRequest&& from) noexcept
    : DisableBreakpointByNameRequest() {
    *this = ::std::move(from);
  }

  inline DisableBreakpointByNameRequest& operator=(const DisableBreakpointByNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableBreakpointByNameRequest& operator=(DisableBreakpointByNameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisableBreakpointByNameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableBreakpointByNameRequest* internal_default_instance() {
    return reinterpret_cast<const DisableBreakpointByNameRequest*>(
               &_DisableBreakpointByNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DisableBreakpointByNameRequest& a, DisableBreakpointByNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableBreakpointByNameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableBreakpointByNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableBreakpointByNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableBreakpointByNameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisableBreakpointByNameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisableBreakpointByNameRequest& from) {
    DisableBreakpointByNameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableBreakpointByNameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.DisableBreakpointByNameRequest";
  }
  protected:
  explicit DisableBreakpointByNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.DisableBreakpointByNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class LoadModuleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.LoadModuleRequest) */ {
 public:
  inline LoadModuleRequest() : LoadModuleRequest(nullptr) {}
  ~LoadModuleRequest() override;
  explicit PROTOBUF_CONSTEXPR LoadModuleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadModuleRequest(const LoadModuleRequest& from);
  LoadModuleRequest(LoadModuleRequest&& from) noexcept
    : LoadModuleRequest() {
    *this = ::std::move(from);
  }

  inline LoadModuleRequest& operator=(const LoadModuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadModuleRequest& operator=(LoadModuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadModuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadModuleRequest* internal_default_instance() {
    return reinterpret_cast<const LoadModuleRequest*>(
               &_LoadModuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(LoadModuleRequest& a, LoadModuleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadModuleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadModuleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadModuleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadModuleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadModuleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadModuleRequest& from) {
    LoadModuleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadModuleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.LoadModuleRequest";
  }
  protected:
  explicit LoadModuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.LoadModuleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class UnloadModuleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.UnloadModuleRequest) */ {
 public:
  inline UnloadModuleRequest() : UnloadModuleRequest(nullptr) {}
  ~UnloadModuleRequest() override;
  explicit PROTOBUF_CONSTEXPR UnloadModuleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnloadModuleRequest(const UnloadModuleRequest& from);
  UnloadModuleRequest(UnloadModuleRequest&& from) noexcept
    : UnloadModuleRequest() {
    *this = ::std::move(from);
  }

  inline UnloadModuleRequest& operator=(const UnloadModuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnloadModuleRequest& operator=(UnloadModuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnloadModuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnloadModuleRequest* internal_default_instance() {
    return reinterpret_cast<const UnloadModuleRequest*>(
               &_UnloadModuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UnloadModuleRequest& a, UnloadModuleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnloadModuleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnloadModuleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnloadModuleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnloadModuleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnloadModuleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnloadModuleRequest& from) {
    UnloadModuleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnloadModuleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.UnloadModuleRequest";
  }
  protected:
  explicit UnloadModuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.UnloadModuleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class ReadMemoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.ReadMemoryRequest) */ {
 public:
  inline ReadMemoryRequest() : ReadMemoryRequest(nullptr) {}
  ~ReadMemoryRequest() override;
  explicit PROTOBUF_CONSTEXPR ReadMemoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadMemoryRequest(const ReadMemoryRequest& from);
  ReadMemoryRequest(ReadMemoryRequest&& from) noexcept
    : ReadMemoryRequest() {
    *this = ::std::move(from);
  }

  inline ReadMemoryRequest& operator=(const ReadMemoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadMemoryRequest& operator=(ReadMemoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadMemoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadMemoryRequest* internal_default_instance() {
    return reinterpret_cast<const ReadMemoryRequest*>(
               &_ReadMemoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ReadMemoryRequest& a, ReadMemoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadMemoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadMemoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadMemoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadMemoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadMemoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadMemoryRequest& from) {
    ReadMemoryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadMemoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.ReadMemoryRequest";
  }
  protected:
  explicit ReadMemoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // uint64 address = 1;
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // uint32 size = 2;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.ReadMemoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t address_;
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class ReadMemoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.ReadMemoryResponse) */ {
 public:
  inline ReadMemoryResponse() : ReadMemoryResponse(nullptr) {}
  ~ReadMemoryResponse() override;
  explicit PROTOBUF_CONSTEXPR ReadMemoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadMemoryResponse(const ReadMemoryResponse& from);
  ReadMemoryResponse(ReadMemoryResponse&& from) noexcept
    : ReadMemoryResponse() {
    *this = ::std::move(from);
  }

  inline ReadMemoryResponse& operator=(const ReadMemoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadMemoryResponse& operator=(ReadMemoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadMemoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadMemoryResponse* internal_default_instance() {
    return reinterpret_cast<const ReadMemoryResponse*>(
               &_ReadMemoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ReadMemoryResponse& a, ReadMemoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadMemoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadMemoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadMemoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadMemoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadMemoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadMemoryResponse& from) {
    ReadMemoryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadMemoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.ReadMemoryResponse";
  }
  protected:
  explicit ReadMemoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 1,
  };
  // bytes bytes = 1;
  void clear_bytes();
  const std::string& bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.ReadMemoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class WriteMemoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.WriteMemoryRequest) */ {
 public:
  inline WriteMemoryRequest() : WriteMemoryRequest(nullptr) {}
  ~WriteMemoryRequest() override;
  explicit PROTOBUF_CONSTEXPR WriteMemoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteMemoryRequest(const WriteMemoryRequest& from);
  WriteMemoryRequest(WriteMemoryRequest&& from) noexcept
    : WriteMemoryRequest() {
    *this = ::std::move(from);
  }

  inline WriteMemoryRequest& operator=(const WriteMemoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteMemoryRequest& operator=(WriteMemoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteMemoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteMemoryRequest* internal_default_instance() {
    return reinterpret_cast<const WriteMemoryRequest*>(
               &_WriteMemoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(WriteMemoryRequest& a, WriteMemoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteMemoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteMemoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteMemoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteMemoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteMemoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteMemoryRequest& from) {
    WriteMemoryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteMemoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.WriteMemoryRequest";
  }
  protected:
  explicit WriteMemoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // bytes bytes = 2;
  void clear_bytes();
  const std::string& bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // uint64 address = 1;
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.WriteMemoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
    uint64_t address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class OptionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.OptionsRequest) */ {
 public:
  inline OptionsRequest() : OptionsRequest(nullptr) {}
  ~OptionsRequest() override;
  explicit PROTOBUF_CONSTEXPR OptionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionsRequest(const OptionsRequest& from);
  OptionsRequest(OptionsRequest&& from) noexcept
    : OptionsRequest() {
    *this = ::std::move(from);
  }

  inline OptionsRequest& operator=(const OptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionsRequest& operator=(OptionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionsRequest* internal_default_instance() {
    return reinterpret_cast<const OptionsRequest*>(
               &_OptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(OptionsRequest& a, OptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptionsRequest& from) {
    OptionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.OptionsRequest";
  }
  protected:
  explicit OptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolPathFieldNumber = 8,
    kReturnCallStackFieldNumber = 1,
    kReturnContextFieldNumber = 2,
    kReturnSymbolInfoFieldNumber = 3,
    kUseInvasiveBreakpointsFieldNumber = 4,
    kUnsafeMemoryModeFieldNumber = 5,
    kAutoDisableBreakpointsModeFieldNumber = 6,
    kKillProcessOnDisconnectFieldNumber = 7,
  };
  // string symbol_path = 8;
  void clear_symbol_path();
  const std::string& symbol_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol_path();
  PROTOBUF_NODISCARD std::string* release_symbol_path();
  void set_allocated_symbol_path(std::string* symbol_path);
  private:
  const std::string& _internal_symbol_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol_path(const std::string& value);
  std::string* _internal_mutable_symbol_path();
  public:

  // bool return_call_stack = 1;
  void clear_return_call_stack();
  bool return_call_stack() const;
  void set_return_call_stack(bool value);
  private:
  bool _internal_return_call_stack() const;
  void _internal_set_return_call_stack(bool value);
  public:

  // bool return_context = 2;
  void clear_return_context();
  bool return_context() const;
  void set_return_context(bool value);
  private:
  bool _internal_return_context() const;
  void _internal_set_return_context(bool value);
  public:

  // bool return_symbol_info = 3;
  void clear_return_symbol_info();
  bool return_symbol_info() const;
  void set_return_symbol_info(bool value);
  private:
  bool _internal_return_symbol_info() const;
  void _internal_set_return_symbol_info(bool value);
  public:

  // bool use_invasive_breakpoints = 4;
  void clear_use_invasive_breakpoints();
  bool use_invasive_breakpoints() const;
  void set_use_invasive_breakpoints(bool value);
  private:
  bool _internal_use_invasive_breakpoints() const;
  void _internal_set_use_invasive_breakpoints(bool value);
  public:

  // bool unsafe_memory_mode = 5;
  void clear_unsafe_memory_mode();
  bool unsafe_memory_mode() const;
  void set_unsafe_memory_mode(bool value);
  private:
  bool _internal_unsafe_memory_mode() const;
  void _internal_set_unsafe_memory_mode(bool value);
  public:

  // bool auto_disable_breakpoints_mode = 6;
  void clear_auto_disable_breakpoints_mode();
  bool auto_disable_breakpoints_mode() const;
  void set_auto_disable_breakpoints_mode(bool value);
  private:
  bool _internal_auto_disable_breakpoints_mode() const;
  void _internal_set_auto_disable_breakpoints_mode(bool value);
  public:

  // bool kill_process_on_disconnect = 7;
  void clear_kill_process_on_disconnect();
  bool kill_process_on_disconnect() const;
  void set_kill_process_on_disconnect(bool value);
  private:
  bool _internal_kill_process_on_disconnect() const;
  void _internal_set_kill_process_on_disconnect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.OptionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_path_;
    bool return_call_stack_;
    bool return_context_;
    bool return_symbol_info_;
    bool use_invasive_breakpoints_;
    bool unsafe_memory_mode_;
    bool auto_disable_breakpoints_mode_;
    bool kill_process_on_disconnect_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class DisassembleAddressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.DisassembleAddressRequest) */ {
 public:
  inline DisassembleAddressRequest() : DisassembleAddressRequest(nullptr) {}
  ~DisassembleAddressRequest() override;
  explicit PROTOBUF_CONSTEXPR DisassembleAddressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisassembleAddressRequest(const DisassembleAddressRequest& from);
  DisassembleAddressRequest(DisassembleAddressRequest&& from) noexcept
    : DisassembleAddressRequest() {
    *this = ::std::move(from);
  }

  inline DisassembleAddressRequest& operator=(const DisassembleAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisassembleAddressRequest& operator=(DisassembleAddressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisassembleAddressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisassembleAddressRequest* internal_default_instance() {
    return reinterpret_cast<const DisassembleAddressRequest*>(
               &_DisassembleAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DisassembleAddressRequest& a, DisassembleAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisassembleAddressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisassembleAddressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisassembleAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisassembleAddressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisassembleAddressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisassembleAddressRequest& from) {
    DisassembleAddressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisassembleAddressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.DisassembleAddressRequest";
  }
  protected:
  explicit DisassembleAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // uint64 address = 1;
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // uint32 size = 2;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.DisassembleAddressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t address_;
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class Instruction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.Instruction) */ {
 public:
  inline Instruction() : Instruction(nullptr) {}
  ~Instruction() override;
  explicit PROTOBUF_CONSTEXPR Instruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Instruction(const Instruction& from);
  Instruction(Instruction&& from) noexcept
    : Instruction() {
    *this = ::std::move(from);
  }

  inline Instruction& operator=(const Instruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instruction& operator=(Instruction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Instruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Instruction* internal_default_instance() {
    return reinterpret_cast<const Instruction*>(
               &_Instruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Instruction& a, Instruction& b) {
    a.Swap(&b);
  }
  inline void Swap(Instruction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Instruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Instruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Instruction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Instruction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Instruction& from) {
    Instruction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instruction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.Instruction";
  }
  protected:
  explicit Instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMnemonicFieldNumber = 2,
    kTextFieldNumber = 3,
    kBytesFieldNumber = 4,
    kAddressFieldNumber = 1,
  };
  // string mnemonic = 2;
  void clear_mnemonic();
  const std::string& mnemonic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mnemonic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mnemonic();
  PROTOBUF_NODISCARD std::string* release_mnemonic();
  void set_allocated_mnemonic(std::string* mnemonic);
  private:
  const std::string& _internal_mnemonic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mnemonic(const std::string& value);
  std::string* _internal_mutable_mnemonic();
  public:

  // string text = 3;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // bytes bytes = 4;
  void clear_bytes();
  const std::string& bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // uint64 address = 1;
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.Instruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mnemonic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
    uint64_t address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class DisassembleAddressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.DisassembleAddressResponse) */ {
 public:
  inline DisassembleAddressResponse() : DisassembleAddressResponse(nullptr) {}
  ~DisassembleAddressResponse() override;
  explicit PROTOBUF_CONSTEXPR DisassembleAddressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisassembleAddressResponse(const DisassembleAddressResponse& from);
  DisassembleAddressResponse(DisassembleAddressResponse&& from) noexcept
    : DisassembleAddressResponse() {
    *this = ::std::move(from);
  }

  inline DisassembleAddressResponse& operator=(const DisassembleAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisassembleAddressResponse& operator=(DisassembleAddressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisassembleAddressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisassembleAddressResponse* internal_default_instance() {
    return reinterpret_cast<const DisassembleAddressResponse*>(
               &_DisassembleAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(DisassembleAddressResponse& a, DisassembleAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DisassembleAddressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisassembleAddressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisassembleAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisassembleAddressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisassembleAddressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisassembleAddressResponse& from) {
    DisassembleAddressResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisassembleAddressResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.DisassembleAddressResponse";
  }
  protected:
  explicit DisassembleAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstructionsFieldNumber = 1,
  };
  // repeated .TED.Grpc.Instruction instructions = 1;
  int instructions_size() const;
  private:
  int _internal_instructions_size() const;
  public:
  void clear_instructions();
  ::TED::Grpc::Instruction* mutable_instructions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::Instruction >*
      mutable_instructions();
  private:
  const ::TED::Grpc::Instruction& _internal_instructions(int index) const;
  ::TED::Grpc::Instruction* _internal_add_instructions();
  public:
  const ::TED::Grpc::Instruction& instructions(int index) const;
  ::TED::Grpc::Instruction* add_instructions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::Instruction >&
      instructions() const;

  // @@protoc_insertion_point(class_scope:TED.Grpc.DisassembleAddressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::Instruction > instructions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// -------------------------------------------------------------------

class GenericResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TED.Grpc.GenericResponse) */ {
 public:
  inline GenericResponse() : GenericResponse(nullptr) {}
  ~GenericResponse() override;
  explicit PROTOBUF_CONSTEXPR GenericResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericResponse(const GenericResponse& from);
  GenericResponse(GenericResponse&& from) noexcept
    : GenericResponse() {
    *this = ::std::move(from);
  }

  inline GenericResponse& operator=(const GenericResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericResponse& operator=(GenericResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericResponse* internal_default_instance() {
    return reinterpret_cast<const GenericResponse*>(
               &_GenericResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GenericResponse& a, GenericResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenericResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenericResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenericResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenericResponse& from) {
    GenericResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TED.Grpc.GenericResponse";
  }
  protected:
  explicit GenericResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastErrorCodeFieldNumber = 2,
    kErrorMessageFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // repeated uint32 last_error_code = 2;
  int last_error_code_size() const;
  private:
  int _internal_last_error_code_size() const;
  public:
  void clear_last_error_code();
  private:
  uint32_t _internal_last_error_code(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_last_error_code() const;
  void _internal_add_last_error_code(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_last_error_code();
  public:
  uint32_t last_error_code(int index) const;
  void set_last_error_code(int index, uint32_t value);
  void add_last_error_code(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      last_error_code() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_last_error_code();

  // repeated string error_message = 3;
  int error_message_size() const;
  private:
  int _internal_error_message_size() const;
  public:
  void clear_error_message();
  const std::string& error_message(int index) const;
  std::string* mutable_error_message(int index);
  void set_error_message(int index, const std::string& value);
  void set_error_message(int index, std::string&& value);
  void set_error_message(int index, const char* value);
  void set_error_message(int index, const char* value, size_t size);
  std::string* add_error_message();
  void add_error_message(const std::string& value);
  void add_error_message(std::string&& value);
  void add_error_message(const char* value);
  void add_error_message(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& error_message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_error_message();
  private:
  const std::string& _internal_error_message(int index) const;
  std::string* _internal_add_error_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TED.Grpc.GenericResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > last_error_code_;
    mutable std::atomic<int> _last_error_code_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> error_message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TED_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// SegmentRegisters

// uint32 cs = 1;
inline void SegmentRegisters::clear_cs() {
  _impl_.cs_ = 0u;
}
inline uint32_t SegmentRegisters::_internal_cs() const {
  return _impl_.cs_;
}
inline uint32_t SegmentRegisters::cs() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.SegmentRegisters.cs)
  return _internal_cs();
}
inline void SegmentRegisters::_internal_set_cs(uint32_t value) {
  
  _impl_.cs_ = value;
}
inline void SegmentRegisters::set_cs(uint32_t value) {
  _internal_set_cs(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.SegmentRegisters.cs)
}

// uint32 ds = 2;
inline void SegmentRegisters::clear_ds() {
  _impl_.ds_ = 0u;
}
inline uint32_t SegmentRegisters::_internal_ds() const {
  return _impl_.ds_;
}
inline uint32_t SegmentRegisters::ds() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.SegmentRegisters.ds)
  return _internal_ds();
}
inline void SegmentRegisters::_internal_set_ds(uint32_t value) {
  
  _impl_.ds_ = value;
}
inline void SegmentRegisters::set_ds(uint32_t value) {
  _internal_set_ds(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.SegmentRegisters.ds)
}

// uint32 es = 3;
inline void SegmentRegisters::clear_es() {
  _impl_.es_ = 0u;
}
inline uint32_t SegmentRegisters::_internal_es() const {
  return _impl_.es_;
}
inline uint32_t SegmentRegisters::es() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.SegmentRegisters.es)
  return _internal_es();
}
inline void SegmentRegisters::_internal_set_es(uint32_t value) {
  
  _impl_.es_ = value;
}
inline void SegmentRegisters::set_es(uint32_t value) {
  _internal_set_es(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.SegmentRegisters.es)
}

// uint32 fs = 4;
inline void SegmentRegisters::clear_fs() {
  _impl_.fs_ = 0u;
}
inline uint32_t SegmentRegisters::_internal_fs() const {
  return _impl_.fs_;
}
inline uint32_t SegmentRegisters::fs() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.SegmentRegisters.fs)
  return _internal_fs();
}
inline void SegmentRegisters::_internal_set_fs(uint32_t value) {
  
  _impl_.fs_ = value;
}
inline void SegmentRegisters::set_fs(uint32_t value) {
  _internal_set_fs(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.SegmentRegisters.fs)
}

// uint32 gs = 5;
inline void SegmentRegisters::clear_gs() {
  _impl_.gs_ = 0u;
}
inline uint32_t SegmentRegisters::_internal_gs() const {
  return _impl_.gs_;
}
inline uint32_t SegmentRegisters::gs() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.SegmentRegisters.gs)
  return _internal_gs();
}
inline void SegmentRegisters::_internal_set_gs(uint32_t value) {
  
  _impl_.gs_ = value;
}
inline void SegmentRegisters::set_gs(uint32_t value) {
  _internal_set_gs(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.SegmentRegisters.gs)
}

// uint32 ss = 6;
inline void SegmentRegisters::clear_ss() {
  _impl_.ss_ = 0u;
}
inline uint32_t SegmentRegisters::_internal_ss() const {
  return _impl_.ss_;
}
inline uint32_t SegmentRegisters::ss() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.SegmentRegisters.ss)
  return _internal_ss();
}
inline void SegmentRegisters::_internal_set_ss(uint32_t value) {
  
  _impl_.ss_ = value;
}
inline void SegmentRegisters::set_ss(uint32_t value) {
  _internal_set_ss(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.SegmentRegisters.ss)
}

// -------------------------------------------------------------------

// DebugRegisters

// uint64 dr0 = 1;
inline void DebugRegisters::clear_dr0() {
  _impl_.dr0_ = uint64_t{0u};
}
inline uint64_t DebugRegisters::_internal_dr0() const {
  return _impl_.dr0_;
}
inline uint64_t DebugRegisters::dr0() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DebugRegisters.dr0)
  return _internal_dr0();
}
inline void DebugRegisters::_internal_set_dr0(uint64_t value) {
  
  _impl_.dr0_ = value;
}
inline void DebugRegisters::set_dr0(uint64_t value) {
  _internal_set_dr0(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.DebugRegisters.dr0)
}

// uint64 dr1 = 2;
inline void DebugRegisters::clear_dr1() {
  _impl_.dr1_ = uint64_t{0u};
}
inline uint64_t DebugRegisters::_internal_dr1() const {
  return _impl_.dr1_;
}
inline uint64_t DebugRegisters::dr1() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DebugRegisters.dr1)
  return _internal_dr1();
}
inline void DebugRegisters::_internal_set_dr1(uint64_t value) {
  
  _impl_.dr1_ = value;
}
inline void DebugRegisters::set_dr1(uint64_t value) {
  _internal_set_dr1(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.DebugRegisters.dr1)
}

// uint64 dr2 = 3;
inline void DebugRegisters::clear_dr2() {
  _impl_.dr2_ = uint64_t{0u};
}
inline uint64_t DebugRegisters::_internal_dr2() const {
  return _impl_.dr2_;
}
inline uint64_t DebugRegisters::dr2() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DebugRegisters.dr2)
  return _internal_dr2();
}
inline void DebugRegisters::_internal_set_dr2(uint64_t value) {
  
  _impl_.dr2_ = value;
}
inline void DebugRegisters::set_dr2(uint64_t value) {
  _internal_set_dr2(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.DebugRegisters.dr2)
}

// uint64 dr3 = 4;
inline void DebugRegisters::clear_dr3() {
  _impl_.dr3_ = uint64_t{0u};
}
inline uint64_t DebugRegisters::_internal_dr3() const {
  return _impl_.dr3_;
}
inline uint64_t DebugRegisters::dr3() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DebugRegisters.dr3)
  return _internal_dr3();
}
inline void DebugRegisters::_internal_set_dr3(uint64_t value) {
  
  _impl_.dr3_ = value;
}
inline void DebugRegisters::set_dr3(uint64_t value) {
  _internal_set_dr3(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.DebugRegisters.dr3)
}

// uint64 dr6 = 5;
inline void DebugRegisters::clear_dr6() {
  _impl_.dr6_ = uint64_t{0u};
}
inline uint64_t DebugRegisters::_internal_dr6() const {
  return _impl_.dr6_;
}
inline uint64_t DebugRegisters::dr6() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DebugRegisters.dr6)
  return _internal_dr6();
}
inline void DebugRegisters::_internal_set_dr6(uint64_t value) {
  
  _impl_.dr6_ = value;
}
inline void DebugRegisters::set_dr6(uint64_t value) {
  _internal_set_dr6(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.DebugRegisters.dr6)
}

// uint64 dr7 = 6;
inline void DebugRegisters::clear_dr7() {
  _impl_.dr7_ = uint64_t{0u};
}
inline uint64_t DebugRegisters::_internal_dr7() const {
  return _impl_.dr7_;
}
inline uint64_t DebugRegisters::dr7() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DebugRegisters.dr7)
  return _internal_dr7();
}
inline void DebugRegisters::_internal_set_dr7(uint64_t value) {
  
  _impl_.dr7_ = value;
}
inline void DebugRegisters::set_dr7(uint64_t value) {
  _internal_set_dr7(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.DebugRegisters.dr7)
}

// -------------------------------------------------------------------

// GeneralRegisters

// uint64 rax = 1;
inline void GeneralRegisters::clear_rax() {
  _impl_.rax_ = uint64_t{0u};
}
inline uint64_t GeneralRegisters::_internal_rax() const {
  return _impl_.rax_;
}
inline uint64_t GeneralRegisters::rax() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegisters.rax)
  return _internal_rax();
}
inline void GeneralRegisters::_internal_set_rax(uint64_t value) {
  
  _impl_.rax_ = value;
}
inline void GeneralRegisters::set_rax(uint64_t value) {
  _internal_set_rax(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegisters.rax)
}

// uint64 rcx = 2;
inline void GeneralRegisters::clear_rcx() {
  _impl_.rcx_ = uint64_t{0u};
}
inline uint64_t GeneralRegisters::_internal_rcx() const {
  return _impl_.rcx_;
}
inline uint64_t GeneralRegisters::rcx() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegisters.rcx)
  return _internal_rcx();
}
inline void GeneralRegisters::_internal_set_rcx(uint64_t value) {
  
  _impl_.rcx_ = value;
}
inline void GeneralRegisters::set_rcx(uint64_t value) {
  _internal_set_rcx(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegisters.rcx)
}

// uint64 rdx = 3;
inline void GeneralRegisters::clear_rdx() {
  _impl_.rdx_ = uint64_t{0u};
}
inline uint64_t GeneralRegisters::_internal_rdx() const {
  return _impl_.rdx_;
}
inline uint64_t GeneralRegisters::rdx() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegisters.rdx)
  return _internal_rdx();
}
inline void GeneralRegisters::_internal_set_rdx(uint64_t value) {
  
  _impl_.rdx_ = value;
}
inline void GeneralRegisters::set_rdx(uint64_t value) {
  _internal_set_rdx(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegisters.rdx)
}

// uint64 rbx = 4;
inline void GeneralRegisters::clear_rbx() {
  _impl_.rbx_ = uint64_t{0u};
}
inline uint64_t GeneralRegisters::_internal_rbx() const {
  return _impl_.rbx_;
}
inline uint64_t GeneralRegisters::rbx() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegisters.rbx)
  return _internal_rbx();
}
inline void GeneralRegisters::_internal_set_rbx(uint64_t value) {
  
  _impl_.rbx_ = value;
}
inline void GeneralRegisters::set_rbx(uint64_t value) {
  _internal_set_rbx(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegisters.rbx)
}

// uint64 rsp = 5;
inline void GeneralRegisters::clear_rsp() {
  _impl_.rsp_ = uint64_t{0u};
}
inline uint64_t GeneralRegisters::_internal_rsp() const {
  return _impl_.rsp_;
}
inline uint64_t GeneralRegisters::rsp() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegisters.rsp)
  return _internal_rsp();
}
inline void GeneralRegisters::_internal_set_rsp(uint64_t value) {
  
  _impl_.rsp_ = value;
}
inline void GeneralRegisters::set_rsp(uint64_t value) {
  _internal_set_rsp(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegisters.rsp)
}

// uint64 rbp = 6;
inline void GeneralRegisters::clear_rbp() {
  _impl_.rbp_ = uint64_t{0u};
}
inline uint64_t GeneralRegisters::_internal_rbp() const {
  return _impl_.rbp_;
}
inline uint64_t GeneralRegisters::rbp() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegisters.rbp)
  return _internal_rbp();
}
inline void GeneralRegisters::_internal_set_rbp(uint64_t value) {
  
  _impl_.rbp_ = value;
}
inline void GeneralRegisters::set_rbp(uint64_t value) {
  _internal_set_rbp(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegisters.rbp)
}

// uint64 rsi = 7;
inline void GeneralRegisters::clear_rsi() {
  _impl_.rsi_ = uint64_t{0u};
}
inline uint64_t GeneralRegisters::_internal_rsi() const {
  return _impl_.rsi_;
}
inline uint64_t GeneralRegisters::rsi() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegisters.rsi)
  return _internal_rsi();
}
inline void GeneralRegisters::_internal_set_rsi(uint64_t value) {
  
  _impl_.rsi_ = value;
}
inline void GeneralRegisters::set_rsi(uint64_t value) {
  _internal_set_rsi(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegisters.rsi)
}

// uint64 rdi = 8;
inline void GeneralRegisters::clear_rdi() {
  _impl_.rdi_ = uint64_t{0u};
}
inline uint64_t GeneralRegisters::_internal_rdi() const {
  return _impl_.rdi_;
}
inline uint64_t GeneralRegisters::rdi() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegisters.rdi)
  return _internal_rdi();
}
inline void GeneralRegisters::_internal_set_rdi(uint64_t value) {
  
  _impl_.rdi_ = value;
}
inline void GeneralRegisters::set_rdi(uint64_t value) {
  _internal_set_rdi(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegisters.rdi)
}

// uint64 rip = 9;
inline void GeneralRegisters::clear_rip() {
  _impl_.rip_ = uint64_t{0u};
}
inline uint64_t GeneralRegisters::_internal_rip() const {
  return _impl_.rip_;
}
inline uint64_t GeneralRegisters::rip() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegisters.rip)
  return _internal_rip();
}
inline void GeneralRegisters::_internal_set_rip(uint64_t value) {
  
  _impl_.rip_ = value;
}
inline void GeneralRegisters::set_rip(uint64_t value) {
  _internal_set_rip(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegisters.rip)
}

// -------------------------------------------------------------------

// GeneralRegistersX64

// uint64 r8 = 1;
inline void GeneralRegistersX64::clear_r8() {
  _impl_.r8_ = uint64_t{0u};
}
inline uint64_t GeneralRegistersX64::_internal_r8() const {
  return _impl_.r8_;
}
inline uint64_t GeneralRegistersX64::r8() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegistersX64.r8)
  return _internal_r8();
}
inline void GeneralRegistersX64::_internal_set_r8(uint64_t value) {
  
  _impl_.r8_ = value;
}
inline void GeneralRegistersX64::set_r8(uint64_t value) {
  _internal_set_r8(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegistersX64.r8)
}

// uint64 r9 = 2;
inline void GeneralRegistersX64::clear_r9() {
  _impl_.r9_ = uint64_t{0u};
}
inline uint64_t GeneralRegistersX64::_internal_r9() const {
  return _impl_.r9_;
}
inline uint64_t GeneralRegistersX64::r9() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegistersX64.r9)
  return _internal_r9();
}
inline void GeneralRegistersX64::_internal_set_r9(uint64_t value) {
  
  _impl_.r9_ = value;
}
inline void GeneralRegistersX64::set_r9(uint64_t value) {
  _internal_set_r9(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegistersX64.r9)
}

// uint64 r10 = 3;
inline void GeneralRegistersX64::clear_r10() {
  _impl_.r10_ = uint64_t{0u};
}
inline uint64_t GeneralRegistersX64::_internal_r10() const {
  return _impl_.r10_;
}
inline uint64_t GeneralRegistersX64::r10() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegistersX64.r10)
  return _internal_r10();
}
inline void GeneralRegistersX64::_internal_set_r10(uint64_t value) {
  
  _impl_.r10_ = value;
}
inline void GeneralRegistersX64::set_r10(uint64_t value) {
  _internal_set_r10(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegistersX64.r10)
}

// uint64 r11 = 4;
inline void GeneralRegistersX64::clear_r11() {
  _impl_.r11_ = uint64_t{0u};
}
inline uint64_t GeneralRegistersX64::_internal_r11() const {
  return _impl_.r11_;
}
inline uint64_t GeneralRegistersX64::r11() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegistersX64.r11)
  return _internal_r11();
}
inline void GeneralRegistersX64::_internal_set_r11(uint64_t value) {
  
  _impl_.r11_ = value;
}
inline void GeneralRegistersX64::set_r11(uint64_t value) {
  _internal_set_r11(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegistersX64.r11)
}

// uint64 r12 = 5;
inline void GeneralRegistersX64::clear_r12() {
  _impl_.r12_ = uint64_t{0u};
}
inline uint64_t GeneralRegistersX64::_internal_r12() const {
  return _impl_.r12_;
}
inline uint64_t GeneralRegistersX64::r12() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegistersX64.r12)
  return _internal_r12();
}
inline void GeneralRegistersX64::_internal_set_r12(uint64_t value) {
  
  _impl_.r12_ = value;
}
inline void GeneralRegistersX64::set_r12(uint64_t value) {
  _internal_set_r12(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegistersX64.r12)
}

// uint64 r13 = 6;
inline void GeneralRegistersX64::clear_r13() {
  _impl_.r13_ = uint64_t{0u};
}
inline uint64_t GeneralRegistersX64::_internal_r13() const {
  return _impl_.r13_;
}
inline uint64_t GeneralRegistersX64::r13() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegistersX64.r13)
  return _internal_r13();
}
inline void GeneralRegistersX64::_internal_set_r13(uint64_t value) {
  
  _impl_.r13_ = value;
}
inline void GeneralRegistersX64::set_r13(uint64_t value) {
  _internal_set_r13(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegistersX64.r13)
}

// uint64 r14 = 7;
inline void GeneralRegistersX64::clear_r14() {
  _impl_.r14_ = uint64_t{0u};
}
inline uint64_t GeneralRegistersX64::_internal_r14() const {
  return _impl_.r14_;
}
inline uint64_t GeneralRegistersX64::r14() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegistersX64.r14)
  return _internal_r14();
}
inline void GeneralRegistersX64::_internal_set_r14(uint64_t value) {
  
  _impl_.r14_ = value;
}
inline void GeneralRegistersX64::set_r14(uint64_t value) {
  _internal_set_r14(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegistersX64.r14)
}

// uint64 r15 = 8;
inline void GeneralRegistersX64::clear_r15() {
  _impl_.r15_ = uint64_t{0u};
}
inline uint64_t GeneralRegistersX64::_internal_r15() const {
  return _impl_.r15_;
}
inline uint64_t GeneralRegistersX64::r15() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GeneralRegistersX64.r15)
  return _internal_r15();
}
inline void GeneralRegistersX64::_internal_set_r15(uint64_t value) {
  
  _impl_.r15_ = value;
}
inline void GeneralRegistersX64::set_r15(uint64_t value) {
  _internal_set_r15(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GeneralRegistersX64.r15)
}

// -------------------------------------------------------------------

// Context

// .TED.Grpc.SegmentRegisters segment_registers = 1;
inline bool Context::_internal_has_segment_registers() const {
  return this != internal_default_instance() && _impl_.segment_registers_ != nullptr;
}
inline bool Context::has_segment_registers() const {
  return _internal_has_segment_registers();
}
inline void Context::clear_segment_registers() {
  if (GetArenaForAllocation() == nullptr && _impl_.segment_registers_ != nullptr) {
    delete _impl_.segment_registers_;
  }
  _impl_.segment_registers_ = nullptr;
}
inline const ::TED::Grpc::SegmentRegisters& Context::_internal_segment_registers() const {
  const ::TED::Grpc::SegmentRegisters* p = _impl_.segment_registers_;
  return p != nullptr ? *p : reinterpret_cast<const ::TED::Grpc::SegmentRegisters&>(
      ::TED::Grpc::_SegmentRegisters_default_instance_);
}
inline const ::TED::Grpc::SegmentRegisters& Context::segment_registers() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.Context.segment_registers)
  return _internal_segment_registers();
}
inline void Context::unsafe_arena_set_allocated_segment_registers(
    ::TED::Grpc::SegmentRegisters* segment_registers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.segment_registers_);
  }
  _impl_.segment_registers_ = segment_registers;
  if (segment_registers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TED.Grpc.Context.segment_registers)
}
inline ::TED::Grpc::SegmentRegisters* Context::release_segment_registers() {
  
  ::TED::Grpc::SegmentRegisters* temp = _impl_.segment_registers_;
  _impl_.segment_registers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TED::Grpc::SegmentRegisters* Context::unsafe_arena_release_segment_registers() {
  // @@protoc_insertion_point(field_release:TED.Grpc.Context.segment_registers)
  
  ::TED::Grpc::SegmentRegisters* temp = _impl_.segment_registers_;
  _impl_.segment_registers_ = nullptr;
  return temp;
}
inline ::TED::Grpc::SegmentRegisters* Context::_internal_mutable_segment_registers() {
  
  if (_impl_.segment_registers_ == nullptr) {
    auto* p = CreateMaybeMessage<::TED::Grpc::SegmentRegisters>(GetArenaForAllocation());
    _impl_.segment_registers_ = p;
  }
  return _impl_.segment_registers_;
}
inline ::TED::Grpc::SegmentRegisters* Context::mutable_segment_registers() {
  ::TED::Grpc::SegmentRegisters* _msg = _internal_mutable_segment_registers();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.Context.segment_registers)
  return _msg;
}
inline void Context::set_allocated_segment_registers(::TED::Grpc::SegmentRegisters* segment_registers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.segment_registers_;
  }
  if (segment_registers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(segment_registers);
    if (message_arena != submessage_arena) {
      segment_registers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment_registers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.segment_registers_ = segment_registers;
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.Context.segment_registers)
}

// .TED.Grpc.DebugRegisters debug_registers = 2;
inline bool Context::_internal_has_debug_registers() const {
  return this != internal_default_instance() && _impl_.debug_registers_ != nullptr;
}
inline bool Context::has_debug_registers() const {
  return _internal_has_debug_registers();
}
inline void Context::clear_debug_registers() {
  if (GetArenaForAllocation() == nullptr && _impl_.debug_registers_ != nullptr) {
    delete _impl_.debug_registers_;
  }
  _impl_.debug_registers_ = nullptr;
}
inline const ::TED::Grpc::DebugRegisters& Context::_internal_debug_registers() const {
  const ::TED::Grpc::DebugRegisters* p = _impl_.debug_registers_;
  return p != nullptr ? *p : reinterpret_cast<const ::TED::Grpc::DebugRegisters&>(
      ::TED::Grpc::_DebugRegisters_default_instance_);
}
inline const ::TED::Grpc::DebugRegisters& Context::debug_registers() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.Context.debug_registers)
  return _internal_debug_registers();
}
inline void Context::unsafe_arena_set_allocated_debug_registers(
    ::TED::Grpc::DebugRegisters* debug_registers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.debug_registers_);
  }
  _impl_.debug_registers_ = debug_registers;
  if (debug_registers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TED.Grpc.Context.debug_registers)
}
inline ::TED::Grpc::DebugRegisters* Context::release_debug_registers() {
  
  ::TED::Grpc::DebugRegisters* temp = _impl_.debug_registers_;
  _impl_.debug_registers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TED::Grpc::DebugRegisters* Context::unsafe_arena_release_debug_registers() {
  // @@protoc_insertion_point(field_release:TED.Grpc.Context.debug_registers)
  
  ::TED::Grpc::DebugRegisters* temp = _impl_.debug_registers_;
  _impl_.debug_registers_ = nullptr;
  return temp;
}
inline ::TED::Grpc::DebugRegisters* Context::_internal_mutable_debug_registers() {
  
  if (_impl_.debug_registers_ == nullptr) {
    auto* p = CreateMaybeMessage<::TED::Grpc::DebugRegisters>(GetArenaForAllocation());
    _impl_.debug_registers_ = p;
  }
  return _impl_.debug_registers_;
}
inline ::TED::Grpc::DebugRegisters* Context::mutable_debug_registers() {
  ::TED::Grpc::DebugRegisters* _msg = _internal_mutable_debug_registers();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.Context.debug_registers)
  return _msg;
}
inline void Context::set_allocated_debug_registers(::TED::Grpc::DebugRegisters* debug_registers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.debug_registers_;
  }
  if (debug_registers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debug_registers);
    if (message_arena != submessage_arena) {
      debug_registers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_registers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.debug_registers_ = debug_registers;
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.Context.debug_registers)
}

// .TED.Grpc.GeneralRegisters general_registers = 3;
inline bool Context::_internal_has_general_registers() const {
  return this != internal_default_instance() && _impl_.general_registers_ != nullptr;
}
inline bool Context::has_general_registers() const {
  return _internal_has_general_registers();
}
inline void Context::clear_general_registers() {
  if (GetArenaForAllocation() == nullptr && _impl_.general_registers_ != nullptr) {
    delete _impl_.general_registers_;
  }
  _impl_.general_registers_ = nullptr;
}
inline const ::TED::Grpc::GeneralRegisters& Context::_internal_general_registers() const {
  const ::TED::Grpc::GeneralRegisters* p = _impl_.general_registers_;
  return p != nullptr ? *p : reinterpret_cast<const ::TED::Grpc::GeneralRegisters&>(
      ::TED::Grpc::_GeneralRegisters_default_instance_);
}
inline const ::TED::Grpc::GeneralRegisters& Context::general_registers() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.Context.general_registers)
  return _internal_general_registers();
}
inline void Context::unsafe_arena_set_allocated_general_registers(
    ::TED::Grpc::GeneralRegisters* general_registers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.general_registers_);
  }
  _impl_.general_registers_ = general_registers;
  if (general_registers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TED.Grpc.Context.general_registers)
}
inline ::TED::Grpc::GeneralRegisters* Context::release_general_registers() {
  
  ::TED::Grpc::GeneralRegisters* temp = _impl_.general_registers_;
  _impl_.general_registers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TED::Grpc::GeneralRegisters* Context::unsafe_arena_release_general_registers() {
  // @@protoc_insertion_point(field_release:TED.Grpc.Context.general_registers)
  
  ::TED::Grpc::GeneralRegisters* temp = _impl_.general_registers_;
  _impl_.general_registers_ = nullptr;
  return temp;
}
inline ::TED::Grpc::GeneralRegisters* Context::_internal_mutable_general_registers() {
  
  if (_impl_.general_registers_ == nullptr) {
    auto* p = CreateMaybeMessage<::TED::Grpc::GeneralRegisters>(GetArenaForAllocation());
    _impl_.general_registers_ = p;
  }
  return _impl_.general_registers_;
}
inline ::TED::Grpc::GeneralRegisters* Context::mutable_general_registers() {
  ::TED::Grpc::GeneralRegisters* _msg = _internal_mutable_general_registers();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.Context.general_registers)
  return _msg;
}
inline void Context::set_allocated_general_registers(::TED::Grpc::GeneralRegisters* general_registers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.general_registers_;
  }
  if (general_registers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(general_registers);
    if (message_arena != submessage_arena) {
      general_registers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, general_registers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.general_registers_ = general_registers;
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.Context.general_registers)
}

// .TED.Grpc.GeneralRegistersX64 general_registers_x64 = 4;
inline bool Context::_internal_has_general_registers_x64() const {
  return this != internal_default_instance() && _impl_.general_registers_x64_ != nullptr;
}
inline bool Context::has_general_registers_x64() const {
  return _internal_has_general_registers_x64();
}
inline void Context::clear_general_registers_x64() {
  if (GetArenaForAllocation() == nullptr && _impl_.general_registers_x64_ != nullptr) {
    delete _impl_.general_registers_x64_;
  }
  _impl_.general_registers_x64_ = nullptr;
}
inline const ::TED::Grpc::GeneralRegistersX64& Context::_internal_general_registers_x64() const {
  const ::TED::Grpc::GeneralRegistersX64* p = _impl_.general_registers_x64_;
  return p != nullptr ? *p : reinterpret_cast<const ::TED::Grpc::GeneralRegistersX64&>(
      ::TED::Grpc::_GeneralRegistersX64_default_instance_);
}
inline const ::TED::Grpc::GeneralRegistersX64& Context::general_registers_x64() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.Context.general_registers_x64)
  return _internal_general_registers_x64();
}
inline void Context::unsafe_arena_set_allocated_general_registers_x64(
    ::TED::Grpc::GeneralRegistersX64* general_registers_x64) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.general_registers_x64_);
  }
  _impl_.general_registers_x64_ = general_registers_x64;
  if (general_registers_x64) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TED.Grpc.Context.general_registers_x64)
}
inline ::TED::Grpc::GeneralRegistersX64* Context::release_general_registers_x64() {
  
  ::TED::Grpc::GeneralRegistersX64* temp = _impl_.general_registers_x64_;
  _impl_.general_registers_x64_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TED::Grpc::GeneralRegistersX64* Context::unsafe_arena_release_general_registers_x64() {
  // @@protoc_insertion_point(field_release:TED.Grpc.Context.general_registers_x64)
  
  ::TED::Grpc::GeneralRegistersX64* temp = _impl_.general_registers_x64_;
  _impl_.general_registers_x64_ = nullptr;
  return temp;
}
inline ::TED::Grpc::GeneralRegistersX64* Context::_internal_mutable_general_registers_x64() {
  
  if (_impl_.general_registers_x64_ == nullptr) {
    auto* p = CreateMaybeMessage<::TED::Grpc::GeneralRegistersX64>(GetArenaForAllocation());
    _impl_.general_registers_x64_ = p;
  }
  return _impl_.general_registers_x64_;
}
inline ::TED::Grpc::GeneralRegistersX64* Context::mutable_general_registers_x64() {
  ::TED::Grpc::GeneralRegistersX64* _msg = _internal_mutable_general_registers_x64();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.Context.general_registers_x64)
  return _msg;
}
inline void Context::set_allocated_general_registers_x64(::TED::Grpc::GeneralRegistersX64* general_registers_x64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.general_registers_x64_;
  }
  if (general_registers_x64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(general_registers_x64);
    if (message_arena != submessage_arena) {
      general_registers_x64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, general_registers_x64, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.general_registers_x64_ = general_registers_x64;
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.Context.general_registers_x64)
}

// int32 processor_flags = 5;
inline void Context::clear_processor_flags() {
  _impl_.processor_flags_ = 0;
}
inline int32_t Context::_internal_processor_flags() const {
  return _impl_.processor_flags_;
}
inline int32_t Context::processor_flags() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.Context.processor_flags)
  return _internal_processor_flags();
}
inline void Context::_internal_set_processor_flags(int32_t value) {
  
  _impl_.processor_flags_ = value;
}
inline void Context::set_processor_flags(int32_t value) {
  _internal_set_processor_flags(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.Context.processor_flags)
}

// -------------------------------------------------------------------

// Symbols

// string function_name = 1;
inline void Symbols::clear_function_name() {
  _impl_.function_name_.ClearToEmpty();
}
inline const std::string& Symbols::function_name() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.Symbols.function_name)
  return _internal_function_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Symbols::set_function_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.function_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.Symbols.function_name)
}
inline std::string* Symbols::mutable_function_name() {
  std::string* _s = _internal_mutable_function_name();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.Symbols.function_name)
  return _s;
}
inline const std::string& Symbols::_internal_function_name() const {
  return _impl_.function_name_.Get();
}
inline void Symbols::_internal_set_function_name(const std::string& value) {
  
  _impl_.function_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Symbols::_internal_mutable_function_name() {
  
  return _impl_.function_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Symbols::release_function_name() {
  // @@protoc_insertion_point(field_release:TED.Grpc.Symbols.function_name)
  return _impl_.function_name_.Release();
}
inline void Symbols::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    
  } else {
    
  }
  _impl_.function_name_.SetAllocated(function_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.function_name_.IsDefault()) {
    _impl_.function_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.Symbols.function_name)
}

// -------------------------------------------------------------------

// StackFrame

// uint64 rip = 1;
inline void StackFrame::clear_rip() {
  _impl_.rip_ = uint64_t{0u};
}
inline uint64_t StackFrame::_internal_rip() const {
  return _impl_.rip_;
}
inline uint64_t StackFrame::rip() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.StackFrame.rip)
  return _internal_rip();
}
inline void StackFrame::_internal_set_rip(uint64_t value) {
  
  _impl_.rip_ = value;
}
inline void StackFrame::set_rip(uint64_t value) {
  _internal_set_rip(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.StackFrame.rip)
}

// uint64 return_address = 2;
inline void StackFrame::clear_return_address() {
  _impl_.return_address_ = uint64_t{0u};
}
inline uint64_t StackFrame::_internal_return_address() const {
  return _impl_.return_address_;
}
inline uint64_t StackFrame::return_address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.StackFrame.return_address)
  return _internal_return_address();
}
inline void StackFrame::_internal_set_return_address(uint64_t value) {
  
  _impl_.return_address_ = value;
}
inline void StackFrame::set_return_address(uint64_t value) {
  _internal_set_return_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.StackFrame.return_address)
}

// uint64 frame_pointer = 3;
inline void StackFrame::clear_frame_pointer() {
  _impl_.frame_pointer_ = uint64_t{0u};
}
inline uint64_t StackFrame::_internal_frame_pointer() const {
  return _impl_.frame_pointer_;
}
inline uint64_t StackFrame::frame_pointer() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.StackFrame.frame_pointer)
  return _internal_frame_pointer();
}
inline void StackFrame::_internal_set_frame_pointer(uint64_t value) {
  
  _impl_.frame_pointer_ = value;
}
inline void StackFrame::set_frame_pointer(uint64_t value) {
  _internal_set_frame_pointer(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.StackFrame.frame_pointer)
}

// uint64 stack_pointer = 4;
inline void StackFrame::clear_stack_pointer() {
  _impl_.stack_pointer_ = uint64_t{0u};
}
inline uint64_t StackFrame::_internal_stack_pointer() const {
  return _impl_.stack_pointer_;
}
inline uint64_t StackFrame::stack_pointer() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.StackFrame.stack_pointer)
  return _internal_stack_pointer();
}
inline void StackFrame::_internal_set_stack_pointer(uint64_t value) {
  
  _impl_.stack_pointer_ = value;
}
inline void StackFrame::set_stack_pointer(uint64_t value) {
  _internal_set_stack_pointer(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.StackFrame.stack_pointer)
}

// repeated uint64 parameters = 5;
inline int StackFrame::_internal_parameters_size() const {
  return _impl_.parameters_.size();
}
inline int StackFrame::parameters_size() const {
  return _internal_parameters_size();
}
inline void StackFrame::clear_parameters() {
  _impl_.parameters_.Clear();
}
inline uint64_t StackFrame::_internal_parameters(int index) const {
  return _impl_.parameters_.Get(index);
}
inline uint64_t StackFrame::parameters(int index) const {
  // @@protoc_insertion_point(field_get:TED.Grpc.StackFrame.parameters)
  return _internal_parameters(index);
}
inline void StackFrame::set_parameters(int index, uint64_t value) {
  _impl_.parameters_.Set(index, value);
  // @@protoc_insertion_point(field_set:TED.Grpc.StackFrame.parameters)
}
inline void StackFrame::_internal_add_parameters(uint64_t value) {
  _impl_.parameters_.Add(value);
}
inline void StackFrame::add_parameters(uint64_t value) {
  _internal_add_parameters(value);
  // @@protoc_insertion_point(field_add:TED.Grpc.StackFrame.parameters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
StackFrame::_internal_parameters() const {
  return _impl_.parameters_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
StackFrame::parameters() const {
  // @@protoc_insertion_point(field_list:TED.Grpc.StackFrame.parameters)
  return _internal_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
StackFrame::_internal_mutable_parameters() {
  return &_impl_.parameters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
StackFrame::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:TED.Grpc.StackFrame.parameters)
  return _internal_mutable_parameters();
}

// .TED.Grpc.Symbols symbols = 6;
inline bool StackFrame::_internal_has_symbols() const {
  return this != internal_default_instance() && _impl_.symbols_ != nullptr;
}
inline bool StackFrame::has_symbols() const {
  return _internal_has_symbols();
}
inline void StackFrame::clear_symbols() {
  if (GetArenaForAllocation() == nullptr && _impl_.symbols_ != nullptr) {
    delete _impl_.symbols_;
  }
  _impl_.symbols_ = nullptr;
}
inline const ::TED::Grpc::Symbols& StackFrame::_internal_symbols() const {
  const ::TED::Grpc::Symbols* p = _impl_.symbols_;
  return p != nullptr ? *p : reinterpret_cast<const ::TED::Grpc::Symbols&>(
      ::TED::Grpc::_Symbols_default_instance_);
}
inline const ::TED::Grpc::Symbols& StackFrame::symbols() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.StackFrame.symbols)
  return _internal_symbols();
}
inline void StackFrame::unsafe_arena_set_allocated_symbols(
    ::TED::Grpc::Symbols* symbols) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.symbols_);
  }
  _impl_.symbols_ = symbols;
  if (symbols) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TED.Grpc.StackFrame.symbols)
}
inline ::TED::Grpc::Symbols* StackFrame::release_symbols() {
  
  ::TED::Grpc::Symbols* temp = _impl_.symbols_;
  _impl_.symbols_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TED::Grpc::Symbols* StackFrame::unsafe_arena_release_symbols() {
  // @@protoc_insertion_point(field_release:TED.Grpc.StackFrame.symbols)
  
  ::TED::Grpc::Symbols* temp = _impl_.symbols_;
  _impl_.symbols_ = nullptr;
  return temp;
}
inline ::TED::Grpc::Symbols* StackFrame::_internal_mutable_symbols() {
  
  if (_impl_.symbols_ == nullptr) {
    auto* p = CreateMaybeMessage<::TED::Grpc::Symbols>(GetArenaForAllocation());
    _impl_.symbols_ = p;
  }
  return _impl_.symbols_;
}
inline ::TED::Grpc::Symbols* StackFrame::mutable_symbols() {
  ::TED::Grpc::Symbols* _msg = _internal_mutable_symbols();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.StackFrame.symbols)
  return _msg;
}
inline void StackFrame::set_allocated_symbols(::TED::Grpc::Symbols* symbols) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.symbols_;
  }
  if (symbols) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(symbols);
    if (message_arena != submessage_arena) {
      symbols = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbols, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.symbols_ = symbols;
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.StackFrame.symbols)
}

// -------------------------------------------------------------------

// CallStack

// repeated .TED.Grpc.StackFrame stack_frame = 1;
inline int CallStack::_internal_stack_frame_size() const {
  return _impl_.stack_frame_.size();
}
inline int CallStack::stack_frame_size() const {
  return _internal_stack_frame_size();
}
inline void CallStack::clear_stack_frame() {
  _impl_.stack_frame_.Clear();
}
inline ::TED::Grpc::StackFrame* CallStack::mutable_stack_frame(int index) {
  // @@protoc_insertion_point(field_mutable:TED.Grpc.CallStack.stack_frame)
  return _impl_.stack_frame_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::StackFrame >*
CallStack::mutable_stack_frame() {
  // @@protoc_insertion_point(field_mutable_list:TED.Grpc.CallStack.stack_frame)
  return &_impl_.stack_frame_;
}
inline const ::TED::Grpc::StackFrame& CallStack::_internal_stack_frame(int index) const {
  return _impl_.stack_frame_.Get(index);
}
inline const ::TED::Grpc::StackFrame& CallStack::stack_frame(int index) const {
  // @@protoc_insertion_point(field_get:TED.Grpc.CallStack.stack_frame)
  return _internal_stack_frame(index);
}
inline ::TED::Grpc::StackFrame* CallStack::_internal_add_stack_frame() {
  return _impl_.stack_frame_.Add();
}
inline ::TED::Grpc::StackFrame* CallStack::add_stack_frame() {
  ::TED::Grpc::StackFrame* _add = _internal_add_stack_frame();
  // @@protoc_insertion_point(field_add:TED.Grpc.CallStack.stack_frame)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::StackFrame >&
CallStack::stack_frame() const {
  // @@protoc_insertion_point(field_list:TED.Grpc.CallStack.stack_frame)
  return _impl_.stack_frame_;
}

// -------------------------------------------------------------------

// BreakpointResponse

// uint32 process_id = 1;
inline void BreakpointResponse::clear_process_id() {
  _impl_.process_id_ = 0u;
}
inline uint32_t BreakpointResponse::_internal_process_id() const {
  return _impl_.process_id_;
}
inline uint32_t BreakpointResponse::process_id() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.BreakpointResponse.process_id)
  return _internal_process_id();
}
inline void BreakpointResponse::_internal_set_process_id(uint32_t value) {
  
  _impl_.process_id_ = value;
}
inline void BreakpointResponse::set_process_id(uint32_t value) {
  _internal_set_process_id(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.BreakpointResponse.process_id)
}

// uint32 thread_id = 2;
inline void BreakpointResponse::clear_thread_id() {
  _impl_.thread_id_ = 0u;
}
inline uint32_t BreakpointResponse::_internal_thread_id() const {
  return _impl_.thread_id_;
}
inline uint32_t BreakpointResponse::thread_id() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.BreakpointResponse.thread_id)
  return _internal_thread_id();
}
inline void BreakpointResponse::_internal_set_thread_id(uint32_t value) {
  
  _impl_.thread_id_ = value;
}
inline void BreakpointResponse::set_thread_id(uint32_t value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.BreakpointResponse.thread_id)
}

// uint64 source_address = 3;
inline void BreakpointResponse::clear_source_address() {
  _impl_.source_address_ = uint64_t{0u};
}
inline uint64_t BreakpointResponse::_internal_source_address() const {
  return _impl_.source_address_;
}
inline uint64_t BreakpointResponse::source_address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.BreakpointResponse.source_address)
  return _internal_source_address();
}
inline void BreakpointResponse::_internal_set_source_address(uint64_t value) {
  
  _impl_.source_address_ = value;
}
inline void BreakpointResponse::set_source_address(uint64_t value) {
  _internal_set_source_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.BreakpointResponse.source_address)
}

// uint64 destination_address = 4;
inline void BreakpointResponse::clear_destination_address() {
  _impl_.destination_address_ = uint64_t{0u};
}
inline uint64_t BreakpointResponse::_internal_destination_address() const {
  return _impl_.destination_address_;
}
inline uint64_t BreakpointResponse::destination_address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.BreakpointResponse.destination_address)
  return _internal_destination_address();
}
inline void BreakpointResponse::_internal_set_destination_address(uint64_t value) {
  
  _impl_.destination_address_ = value;
}
inline void BreakpointResponse::set_destination_address(uint64_t value) {
  _internal_set_destination_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.BreakpointResponse.destination_address)
}

// .TED.Grpc.Context context = 5;
inline bool BreakpointResponse::_internal_has_context() const {
  return this != internal_default_instance() && _impl_.context_ != nullptr;
}
inline bool BreakpointResponse::has_context() const {
  return _internal_has_context();
}
inline void BreakpointResponse::clear_context() {
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
}
inline const ::TED::Grpc::Context& BreakpointResponse::_internal_context() const {
  const ::TED::Grpc::Context* p = _impl_.context_;
  return p != nullptr ? *p : reinterpret_cast<const ::TED::Grpc::Context&>(
      ::TED::Grpc::_Context_default_instance_);
}
inline const ::TED::Grpc::Context& BreakpointResponse::context() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.BreakpointResponse.context)
  return _internal_context();
}
inline void BreakpointResponse::unsafe_arena_set_allocated_context(
    ::TED::Grpc::Context* context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.context_);
  }
  _impl_.context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TED.Grpc.BreakpointResponse.context)
}
inline ::TED::Grpc::Context* BreakpointResponse::release_context() {
  
  ::TED::Grpc::Context* temp = _impl_.context_;
  _impl_.context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TED::Grpc::Context* BreakpointResponse::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:TED.Grpc.BreakpointResponse.context)
  
  ::TED::Grpc::Context* temp = _impl_.context_;
  _impl_.context_ = nullptr;
  return temp;
}
inline ::TED::Grpc::Context* BreakpointResponse::_internal_mutable_context() {
  
  if (_impl_.context_ == nullptr) {
    auto* p = CreateMaybeMessage<::TED::Grpc::Context>(GetArenaForAllocation());
    _impl_.context_ = p;
  }
  return _impl_.context_;
}
inline ::TED::Grpc::Context* BreakpointResponse::mutable_context() {
  ::TED::Grpc::Context* _msg = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.BreakpointResponse.context)
  return _msg;
}
inline void BreakpointResponse::set_allocated_context(::TED::Grpc::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.context_ = context;
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.BreakpointResponse.context)
}

// .TED.Grpc.CallStack call_stack = 6;
inline bool BreakpointResponse::_internal_has_call_stack() const {
  return this != internal_default_instance() && _impl_.call_stack_ != nullptr;
}
inline bool BreakpointResponse::has_call_stack() const {
  return _internal_has_call_stack();
}
inline void BreakpointResponse::clear_call_stack() {
  if (GetArenaForAllocation() == nullptr && _impl_.call_stack_ != nullptr) {
    delete _impl_.call_stack_;
  }
  _impl_.call_stack_ = nullptr;
}
inline const ::TED::Grpc::CallStack& BreakpointResponse::_internal_call_stack() const {
  const ::TED::Grpc::CallStack* p = _impl_.call_stack_;
  return p != nullptr ? *p : reinterpret_cast<const ::TED::Grpc::CallStack&>(
      ::TED::Grpc::_CallStack_default_instance_);
}
inline const ::TED::Grpc::CallStack& BreakpointResponse::call_stack() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.BreakpointResponse.call_stack)
  return _internal_call_stack();
}
inline void BreakpointResponse::unsafe_arena_set_allocated_call_stack(
    ::TED::Grpc::CallStack* call_stack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.call_stack_);
  }
  _impl_.call_stack_ = call_stack;
  if (call_stack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TED.Grpc.BreakpointResponse.call_stack)
}
inline ::TED::Grpc::CallStack* BreakpointResponse::release_call_stack() {
  
  ::TED::Grpc::CallStack* temp = _impl_.call_stack_;
  _impl_.call_stack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TED::Grpc::CallStack* BreakpointResponse::unsafe_arena_release_call_stack() {
  // @@protoc_insertion_point(field_release:TED.Grpc.BreakpointResponse.call_stack)
  
  ::TED::Grpc::CallStack* temp = _impl_.call_stack_;
  _impl_.call_stack_ = nullptr;
  return temp;
}
inline ::TED::Grpc::CallStack* BreakpointResponse::_internal_mutable_call_stack() {
  
  if (_impl_.call_stack_ == nullptr) {
    auto* p = CreateMaybeMessage<::TED::Grpc::CallStack>(GetArenaForAllocation());
    _impl_.call_stack_ = p;
  }
  return _impl_.call_stack_;
}
inline ::TED::Grpc::CallStack* BreakpointResponse::mutable_call_stack() {
  ::TED::Grpc::CallStack* _msg = _internal_mutable_call_stack();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.BreakpointResponse.call_stack)
  return _msg;
}
inline void BreakpointResponse::set_allocated_call_stack(::TED::Grpc::CallStack* call_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.call_stack_;
  }
  if (call_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(call_stack);
    if (message_arena != submessage_arena) {
      call_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_stack, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.call_stack_ = call_stack;
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.BreakpointResponse.call_stack)
}

// -------------------------------------------------------------------

// ExecutableSection

// string name = 1;
inline void ExecutableSection::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ExecutableSection::name() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.ExecutableSection.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutableSection::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.ExecutableSection.name)
}
inline std::string* ExecutableSection::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.ExecutableSection.name)
  return _s;
}
inline const std::string& ExecutableSection::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ExecutableSection::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ExecutableSection::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ExecutableSection::release_name() {
  // @@protoc_insertion_point(field_release:TED.Grpc.ExecutableSection.name)
  return _impl_.name_.Release();
}
inline void ExecutableSection::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.ExecutableSection.name)
}

// uint64 address = 2;
inline void ExecutableSection::clear_address() {
  _impl_.address_ = uint64_t{0u};
}
inline uint64_t ExecutableSection::_internal_address() const {
  return _impl_.address_;
}
inline uint64_t ExecutableSection::address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.ExecutableSection.address)
  return _internal_address();
}
inline void ExecutableSection::_internal_set_address(uint64_t value) {
  
  _impl_.address_ = value;
}
inline void ExecutableSection::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.ExecutableSection.address)
}

// uint64 size = 3;
inline void ExecutableSection::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t ExecutableSection::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t ExecutableSection::size() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.ExecutableSection.size)
  return _internal_size();
}
inline void ExecutableSection::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void ExecutableSection::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.ExecutableSection.size)
}

// -------------------------------------------------------------------

// ModuleInfo

// string name = 1;
inline void ModuleInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ModuleInfo::name() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.ModuleInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.ModuleInfo.name)
}
inline std::string* ModuleInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.ModuleInfo.name)
  return _s;
}
inline const std::string& ModuleInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ModuleInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ModuleInfo::release_name() {
  // @@protoc_insertion_point(field_release:TED.Grpc.ModuleInfo.name)
  return _impl_.name_.Release();
}
inline void ModuleInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.ModuleInfo.name)
}

// uint64 base_address = 2;
inline void ModuleInfo::clear_base_address() {
  _impl_.base_address_ = uint64_t{0u};
}
inline uint64_t ModuleInfo::_internal_base_address() const {
  return _impl_.base_address_;
}
inline uint64_t ModuleInfo::base_address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.ModuleInfo.base_address)
  return _internal_base_address();
}
inline void ModuleInfo::_internal_set_base_address(uint64_t value) {
  
  _impl_.base_address_ = value;
}
inline void ModuleInfo::set_base_address(uint64_t value) {
  _internal_set_base_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.ModuleInfo.base_address)
}

// uint64 size = 3;
inline void ModuleInfo::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t ModuleInfo::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t ModuleInfo::size() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.ModuleInfo.size)
  return _internal_size();
}
inline void ModuleInfo::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void ModuleInfo::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.ModuleInfo.size)
}

// repeated .TED.Grpc.ExecutableSection executable_sections = 4;
inline int ModuleInfo::_internal_executable_sections_size() const {
  return _impl_.executable_sections_.size();
}
inline int ModuleInfo::executable_sections_size() const {
  return _internal_executable_sections_size();
}
inline void ModuleInfo::clear_executable_sections() {
  _impl_.executable_sections_.Clear();
}
inline ::TED::Grpc::ExecutableSection* ModuleInfo::mutable_executable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:TED.Grpc.ModuleInfo.executable_sections)
  return _impl_.executable_sections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::ExecutableSection >*
ModuleInfo::mutable_executable_sections() {
  // @@protoc_insertion_point(field_mutable_list:TED.Grpc.ModuleInfo.executable_sections)
  return &_impl_.executable_sections_;
}
inline const ::TED::Grpc::ExecutableSection& ModuleInfo::_internal_executable_sections(int index) const {
  return _impl_.executable_sections_.Get(index);
}
inline const ::TED::Grpc::ExecutableSection& ModuleInfo::executable_sections(int index) const {
  // @@protoc_insertion_point(field_get:TED.Grpc.ModuleInfo.executable_sections)
  return _internal_executable_sections(index);
}
inline ::TED::Grpc::ExecutableSection* ModuleInfo::_internal_add_executable_sections() {
  return _impl_.executable_sections_.Add();
}
inline ::TED::Grpc::ExecutableSection* ModuleInfo::add_executable_sections() {
  ::TED::Grpc::ExecutableSection* _add = _internal_add_executable_sections();
  // @@protoc_insertion_point(field_add:TED.Grpc.ModuleInfo.executable_sections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::ExecutableSection >&
ModuleInfo::executable_sections() const {
  // @@protoc_insertion_point(field_list:TED.Grpc.ModuleInfo.executable_sections)
  return _impl_.executable_sections_;
}

// -------------------------------------------------------------------

// GetModulesResponse

// repeated .TED.Grpc.ModuleInfo module_info = 1;
inline int GetModulesResponse::_internal_module_info_size() const {
  return _impl_.module_info_.size();
}
inline int GetModulesResponse::module_info_size() const {
  return _internal_module_info_size();
}
inline void GetModulesResponse::clear_module_info() {
  _impl_.module_info_.Clear();
}
inline ::TED::Grpc::ModuleInfo* GetModulesResponse::mutable_module_info(int index) {
  // @@protoc_insertion_point(field_mutable:TED.Grpc.GetModulesResponse.module_info)
  return _impl_.module_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::ModuleInfo >*
GetModulesResponse::mutable_module_info() {
  // @@protoc_insertion_point(field_mutable_list:TED.Grpc.GetModulesResponse.module_info)
  return &_impl_.module_info_;
}
inline const ::TED::Grpc::ModuleInfo& GetModulesResponse::_internal_module_info(int index) const {
  return _impl_.module_info_.Get(index);
}
inline const ::TED::Grpc::ModuleInfo& GetModulesResponse::module_info(int index) const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GetModulesResponse.module_info)
  return _internal_module_info(index);
}
inline ::TED::Grpc::ModuleInfo* GetModulesResponse::_internal_add_module_info() {
  return _impl_.module_info_.Add();
}
inline ::TED::Grpc::ModuleInfo* GetModulesResponse::add_module_info() {
  ::TED::Grpc::ModuleInfo* _add = _internal_add_module_info();
  // @@protoc_insertion_point(field_add:TED.Grpc.GetModulesResponse.module_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::ModuleInfo >&
GetModulesResponse::module_info() const {
  // @@protoc_insertion_point(field_list:TED.Grpc.GetModulesResponse.module_info)
  return _impl_.module_info_;
}

// -------------------------------------------------------------------

// EnableBreakAllCallsInModuleRequest

// string module_name = 1;
inline void EnableBreakAllCallsInModuleRequest::clear_module_name() {
  _impl_.module_name_.ClearToEmpty();
}
inline const std::string& EnableBreakAllCallsInModuleRequest::module_name() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.EnableBreakAllCallsInModuleRequest.module_name)
  return _internal_module_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnableBreakAllCallsInModuleRequest::set_module_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.module_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.EnableBreakAllCallsInModuleRequest.module_name)
}
inline std::string* EnableBreakAllCallsInModuleRequest::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.EnableBreakAllCallsInModuleRequest.module_name)
  return _s;
}
inline const std::string& EnableBreakAllCallsInModuleRequest::_internal_module_name() const {
  return _impl_.module_name_.Get();
}
inline void EnableBreakAllCallsInModuleRequest::_internal_set_module_name(const std::string& value) {
  
  _impl_.module_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EnableBreakAllCallsInModuleRequest::_internal_mutable_module_name() {
  
  return _impl_.module_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EnableBreakAllCallsInModuleRequest::release_module_name() {
  // @@protoc_insertion_point(field_release:TED.Grpc.EnableBreakAllCallsInModuleRequest.module_name)
  return _impl_.module_name_.Release();
}
inline void EnableBreakAllCallsInModuleRequest::set_allocated_module_name(std::string* module_name) {
  if (module_name != nullptr) {
    
  } else {
    
  }
  _impl_.module_name_.SetAllocated(module_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.module_name_.IsDefault()) {
    _impl_.module_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.EnableBreakAllCallsInModuleRequest.module_name)
}

// -------------------------------------------------------------------

// DisableBreakAllCallsInModuleRequest

// string module_name = 1;
inline void DisableBreakAllCallsInModuleRequest::clear_module_name() {
  _impl_.module_name_.ClearToEmpty();
}
inline const std::string& DisableBreakAllCallsInModuleRequest::module_name() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DisableBreakAllCallsInModuleRequest.module_name)
  return _internal_module_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisableBreakAllCallsInModuleRequest::set_module_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.module_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.DisableBreakAllCallsInModuleRequest.module_name)
}
inline std::string* DisableBreakAllCallsInModuleRequest::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.DisableBreakAllCallsInModuleRequest.module_name)
  return _s;
}
inline const std::string& DisableBreakAllCallsInModuleRequest::_internal_module_name() const {
  return _impl_.module_name_.Get();
}
inline void DisableBreakAllCallsInModuleRequest::_internal_set_module_name(const std::string& value) {
  
  _impl_.module_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DisableBreakAllCallsInModuleRequest::_internal_mutable_module_name() {
  
  return _impl_.module_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DisableBreakAllCallsInModuleRequest::release_module_name() {
  // @@protoc_insertion_point(field_release:TED.Grpc.DisableBreakAllCallsInModuleRequest.module_name)
  return _impl_.module_name_.Release();
}
inline void DisableBreakAllCallsInModuleRequest::set_allocated_module_name(std::string* module_name) {
  if (module_name != nullptr) {
    
  } else {
    
  }
  _impl_.module_name_.SetAllocated(module_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.module_name_.IsDefault()) {
    _impl_.module_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.DisableBreakAllCallsInModuleRequest.module_name)
}

// -------------------------------------------------------------------

// EnableBreakCallByAddressRequest

// uint64 address = 1;
inline void EnableBreakCallByAddressRequest::clear_address() {
  _impl_.address_ = uint64_t{0u};
}
inline uint64_t EnableBreakCallByAddressRequest::_internal_address() const {
  return _impl_.address_;
}
inline uint64_t EnableBreakCallByAddressRequest::address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.EnableBreakCallByAddressRequest.address)
  return _internal_address();
}
inline void EnableBreakCallByAddressRequest::_internal_set_address(uint64_t value) {
  
  _impl_.address_ = value;
}
inline void EnableBreakCallByAddressRequest::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.EnableBreakCallByAddressRequest.address)
}

// -------------------------------------------------------------------

// DisableBreakCallByAddressRequest

// uint64 address = 1;
inline void DisableBreakCallByAddressRequest::clear_address() {
  _impl_.address_ = uint64_t{0u};
}
inline uint64_t DisableBreakCallByAddressRequest::_internal_address() const {
  return _impl_.address_;
}
inline uint64_t DisableBreakCallByAddressRequest::address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DisableBreakCallByAddressRequest.address)
  return _internal_address();
}
inline void DisableBreakCallByAddressRequest::_internal_set_address(uint64_t value) {
  
  _impl_.address_ = value;
}
inline void DisableBreakCallByAddressRequest::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.DisableBreakCallByAddressRequest.address)
}

// -------------------------------------------------------------------

// EnableBreakCallByNameRequest

// string name = 1;
inline void EnableBreakCallByNameRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EnableBreakCallByNameRequest::name() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.EnableBreakCallByNameRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnableBreakCallByNameRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.EnableBreakCallByNameRequest.name)
}
inline std::string* EnableBreakCallByNameRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.EnableBreakCallByNameRequest.name)
  return _s;
}
inline const std::string& EnableBreakCallByNameRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EnableBreakCallByNameRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EnableBreakCallByNameRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EnableBreakCallByNameRequest::release_name() {
  // @@protoc_insertion_point(field_release:TED.Grpc.EnableBreakCallByNameRequest.name)
  return _impl_.name_.Release();
}
inline void EnableBreakCallByNameRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.EnableBreakCallByNameRequest.name)
}

// -------------------------------------------------------------------

// DisableBreakCallByNameRequest

// string name = 1;
inline void DisableBreakCallByNameRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DisableBreakCallByNameRequest::name() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DisableBreakCallByNameRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisableBreakCallByNameRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.DisableBreakCallByNameRequest.name)
}
inline std::string* DisableBreakCallByNameRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.DisableBreakCallByNameRequest.name)
  return _s;
}
inline const std::string& DisableBreakCallByNameRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DisableBreakCallByNameRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DisableBreakCallByNameRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DisableBreakCallByNameRequest::release_name() {
  // @@protoc_insertion_point(field_release:TED.Grpc.DisableBreakCallByNameRequest.name)
  return _impl_.name_.Release();
}
inline void DisableBreakCallByNameRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.DisableBreakCallByNameRequest.name)
}

// -------------------------------------------------------------------

// EnableBreakpointByAddressRequest

// uint64 address = 1;
inline void EnableBreakpointByAddressRequest::clear_address() {
  _impl_.address_ = uint64_t{0u};
}
inline uint64_t EnableBreakpointByAddressRequest::_internal_address() const {
  return _impl_.address_;
}
inline uint64_t EnableBreakpointByAddressRequest::address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.EnableBreakpointByAddressRequest.address)
  return _internal_address();
}
inline void EnableBreakpointByAddressRequest::_internal_set_address(uint64_t value) {
  
  _impl_.address_ = value;
}
inline void EnableBreakpointByAddressRequest::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.EnableBreakpointByAddressRequest.address)
}

// -------------------------------------------------------------------

// DisableBreakpointByAddressRequest

// uint64 address = 1;
inline void DisableBreakpointByAddressRequest::clear_address() {
  _impl_.address_ = uint64_t{0u};
}
inline uint64_t DisableBreakpointByAddressRequest::_internal_address() const {
  return _impl_.address_;
}
inline uint64_t DisableBreakpointByAddressRequest::address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DisableBreakpointByAddressRequest.address)
  return _internal_address();
}
inline void DisableBreakpointByAddressRequest::_internal_set_address(uint64_t value) {
  
  _impl_.address_ = value;
}
inline void DisableBreakpointByAddressRequest::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.DisableBreakpointByAddressRequest.address)
}

// -------------------------------------------------------------------

// EnableBreakpointByNameRequest

// string name = 1;
inline void EnableBreakpointByNameRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EnableBreakpointByNameRequest::name() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.EnableBreakpointByNameRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnableBreakpointByNameRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.EnableBreakpointByNameRequest.name)
}
inline std::string* EnableBreakpointByNameRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.EnableBreakpointByNameRequest.name)
  return _s;
}
inline const std::string& EnableBreakpointByNameRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EnableBreakpointByNameRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EnableBreakpointByNameRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EnableBreakpointByNameRequest::release_name() {
  // @@protoc_insertion_point(field_release:TED.Grpc.EnableBreakpointByNameRequest.name)
  return _impl_.name_.Release();
}
inline void EnableBreakpointByNameRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.EnableBreakpointByNameRequest.name)
}

// -------------------------------------------------------------------

// DisableBreakpointByNameRequest

// string name = 1;
inline void DisableBreakpointByNameRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DisableBreakpointByNameRequest::name() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DisableBreakpointByNameRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisableBreakpointByNameRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.DisableBreakpointByNameRequest.name)
}
inline std::string* DisableBreakpointByNameRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.DisableBreakpointByNameRequest.name)
  return _s;
}
inline const std::string& DisableBreakpointByNameRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DisableBreakpointByNameRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DisableBreakpointByNameRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DisableBreakpointByNameRequest::release_name() {
  // @@protoc_insertion_point(field_release:TED.Grpc.DisableBreakpointByNameRequest.name)
  return _impl_.name_.Release();
}
inline void DisableBreakpointByNameRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.DisableBreakpointByNameRequest.name)
}

// -------------------------------------------------------------------

// LoadModuleRequest

// string path = 1;
inline void LoadModuleRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& LoadModuleRequest::path() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.LoadModuleRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadModuleRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.LoadModuleRequest.path)
}
inline std::string* LoadModuleRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.LoadModuleRequest.path)
  return _s;
}
inline const std::string& LoadModuleRequest::_internal_path() const {
  return _impl_.path_.Get();
}
inline void LoadModuleRequest::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadModuleRequest::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadModuleRequest::release_path() {
  // @@protoc_insertion_point(field_release:TED.Grpc.LoadModuleRequest.path)
  return _impl_.path_.Release();
}
inline void LoadModuleRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.LoadModuleRequest.path)
}

// -------------------------------------------------------------------

// UnloadModuleRequest

// string path = 1;
inline void UnloadModuleRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& UnloadModuleRequest::path() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.UnloadModuleRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnloadModuleRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.UnloadModuleRequest.path)
}
inline std::string* UnloadModuleRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.UnloadModuleRequest.path)
  return _s;
}
inline const std::string& UnloadModuleRequest::_internal_path() const {
  return _impl_.path_.Get();
}
inline void UnloadModuleRequest::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* UnloadModuleRequest::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* UnloadModuleRequest::release_path() {
  // @@protoc_insertion_point(field_release:TED.Grpc.UnloadModuleRequest.path)
  return _impl_.path_.Release();
}
inline void UnloadModuleRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.UnloadModuleRequest.path)
}

// -------------------------------------------------------------------

// ReadMemoryRequest

// uint64 address = 1;
inline void ReadMemoryRequest::clear_address() {
  _impl_.address_ = uint64_t{0u};
}
inline uint64_t ReadMemoryRequest::_internal_address() const {
  return _impl_.address_;
}
inline uint64_t ReadMemoryRequest::address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.ReadMemoryRequest.address)
  return _internal_address();
}
inline void ReadMemoryRequest::_internal_set_address(uint64_t value) {
  
  _impl_.address_ = value;
}
inline void ReadMemoryRequest::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.ReadMemoryRequest.address)
}

// uint32 size = 2;
inline void ReadMemoryRequest::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t ReadMemoryRequest::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t ReadMemoryRequest::size() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.ReadMemoryRequest.size)
  return _internal_size();
}
inline void ReadMemoryRequest::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void ReadMemoryRequest::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.ReadMemoryRequest.size)
}

// -------------------------------------------------------------------

// ReadMemoryResponse

// bytes bytes = 1;
inline void ReadMemoryResponse::clear_bytes() {
  _impl_.bytes_.ClearToEmpty();
}
inline const std::string& ReadMemoryResponse::bytes() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.ReadMemoryResponse.bytes)
  return _internal_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadMemoryResponse::set_bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.ReadMemoryResponse.bytes)
}
inline std::string* ReadMemoryResponse::mutable_bytes() {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.ReadMemoryResponse.bytes)
  return _s;
}
inline const std::string& ReadMemoryResponse::_internal_bytes() const {
  return _impl_.bytes_.Get();
}
inline void ReadMemoryResponse::_internal_set_bytes(const std::string& value) {
  
  _impl_.bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadMemoryResponse::_internal_mutable_bytes() {
  
  return _impl_.bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadMemoryResponse::release_bytes() {
  // @@protoc_insertion_point(field_release:TED.Grpc.ReadMemoryResponse.bytes)
  return _impl_.bytes_.Release();
}
inline void ReadMemoryResponse::set_allocated_bytes(std::string* bytes) {
  if (bytes != nullptr) {
    
  } else {
    
  }
  _impl_.bytes_.SetAllocated(bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bytes_.IsDefault()) {
    _impl_.bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.ReadMemoryResponse.bytes)
}

// -------------------------------------------------------------------

// WriteMemoryRequest

// uint64 address = 1;
inline void WriteMemoryRequest::clear_address() {
  _impl_.address_ = uint64_t{0u};
}
inline uint64_t WriteMemoryRequest::_internal_address() const {
  return _impl_.address_;
}
inline uint64_t WriteMemoryRequest::address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.WriteMemoryRequest.address)
  return _internal_address();
}
inline void WriteMemoryRequest::_internal_set_address(uint64_t value) {
  
  _impl_.address_ = value;
}
inline void WriteMemoryRequest::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.WriteMemoryRequest.address)
}

// bytes bytes = 2;
inline void WriteMemoryRequest::clear_bytes() {
  _impl_.bytes_.ClearToEmpty();
}
inline const std::string& WriteMemoryRequest::bytes() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.WriteMemoryRequest.bytes)
  return _internal_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteMemoryRequest::set_bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.WriteMemoryRequest.bytes)
}
inline std::string* WriteMemoryRequest::mutable_bytes() {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.WriteMemoryRequest.bytes)
  return _s;
}
inline const std::string& WriteMemoryRequest::_internal_bytes() const {
  return _impl_.bytes_.Get();
}
inline void WriteMemoryRequest::_internal_set_bytes(const std::string& value) {
  
  _impl_.bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteMemoryRequest::_internal_mutable_bytes() {
  
  return _impl_.bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteMemoryRequest::release_bytes() {
  // @@protoc_insertion_point(field_release:TED.Grpc.WriteMemoryRequest.bytes)
  return _impl_.bytes_.Release();
}
inline void WriteMemoryRequest::set_allocated_bytes(std::string* bytes) {
  if (bytes != nullptr) {
    
  } else {
    
  }
  _impl_.bytes_.SetAllocated(bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bytes_.IsDefault()) {
    _impl_.bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.WriteMemoryRequest.bytes)
}

// -------------------------------------------------------------------

// OptionsRequest

// bool return_call_stack = 1;
inline void OptionsRequest::clear_return_call_stack() {
  _impl_.return_call_stack_ = false;
}
inline bool OptionsRequest::_internal_return_call_stack() const {
  return _impl_.return_call_stack_;
}
inline bool OptionsRequest::return_call_stack() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.OptionsRequest.return_call_stack)
  return _internal_return_call_stack();
}
inline void OptionsRequest::_internal_set_return_call_stack(bool value) {
  
  _impl_.return_call_stack_ = value;
}
inline void OptionsRequest::set_return_call_stack(bool value) {
  _internal_set_return_call_stack(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.OptionsRequest.return_call_stack)
}

// bool return_context = 2;
inline void OptionsRequest::clear_return_context() {
  _impl_.return_context_ = false;
}
inline bool OptionsRequest::_internal_return_context() const {
  return _impl_.return_context_;
}
inline bool OptionsRequest::return_context() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.OptionsRequest.return_context)
  return _internal_return_context();
}
inline void OptionsRequest::_internal_set_return_context(bool value) {
  
  _impl_.return_context_ = value;
}
inline void OptionsRequest::set_return_context(bool value) {
  _internal_set_return_context(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.OptionsRequest.return_context)
}

// bool return_symbol_info = 3;
inline void OptionsRequest::clear_return_symbol_info() {
  _impl_.return_symbol_info_ = false;
}
inline bool OptionsRequest::_internal_return_symbol_info() const {
  return _impl_.return_symbol_info_;
}
inline bool OptionsRequest::return_symbol_info() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.OptionsRequest.return_symbol_info)
  return _internal_return_symbol_info();
}
inline void OptionsRequest::_internal_set_return_symbol_info(bool value) {
  
  _impl_.return_symbol_info_ = value;
}
inline void OptionsRequest::set_return_symbol_info(bool value) {
  _internal_set_return_symbol_info(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.OptionsRequest.return_symbol_info)
}

// bool use_invasive_breakpoints = 4;
inline void OptionsRequest::clear_use_invasive_breakpoints() {
  _impl_.use_invasive_breakpoints_ = false;
}
inline bool OptionsRequest::_internal_use_invasive_breakpoints() const {
  return _impl_.use_invasive_breakpoints_;
}
inline bool OptionsRequest::use_invasive_breakpoints() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.OptionsRequest.use_invasive_breakpoints)
  return _internal_use_invasive_breakpoints();
}
inline void OptionsRequest::_internal_set_use_invasive_breakpoints(bool value) {
  
  _impl_.use_invasive_breakpoints_ = value;
}
inline void OptionsRequest::set_use_invasive_breakpoints(bool value) {
  _internal_set_use_invasive_breakpoints(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.OptionsRequest.use_invasive_breakpoints)
}

// bool unsafe_memory_mode = 5;
inline void OptionsRequest::clear_unsafe_memory_mode() {
  _impl_.unsafe_memory_mode_ = false;
}
inline bool OptionsRequest::_internal_unsafe_memory_mode() const {
  return _impl_.unsafe_memory_mode_;
}
inline bool OptionsRequest::unsafe_memory_mode() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.OptionsRequest.unsafe_memory_mode)
  return _internal_unsafe_memory_mode();
}
inline void OptionsRequest::_internal_set_unsafe_memory_mode(bool value) {
  
  _impl_.unsafe_memory_mode_ = value;
}
inline void OptionsRequest::set_unsafe_memory_mode(bool value) {
  _internal_set_unsafe_memory_mode(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.OptionsRequest.unsafe_memory_mode)
}

// bool auto_disable_breakpoints_mode = 6;
inline void OptionsRequest::clear_auto_disable_breakpoints_mode() {
  _impl_.auto_disable_breakpoints_mode_ = false;
}
inline bool OptionsRequest::_internal_auto_disable_breakpoints_mode() const {
  return _impl_.auto_disable_breakpoints_mode_;
}
inline bool OptionsRequest::auto_disable_breakpoints_mode() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.OptionsRequest.auto_disable_breakpoints_mode)
  return _internal_auto_disable_breakpoints_mode();
}
inline void OptionsRequest::_internal_set_auto_disable_breakpoints_mode(bool value) {
  
  _impl_.auto_disable_breakpoints_mode_ = value;
}
inline void OptionsRequest::set_auto_disable_breakpoints_mode(bool value) {
  _internal_set_auto_disable_breakpoints_mode(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.OptionsRequest.auto_disable_breakpoints_mode)
}

// bool kill_process_on_disconnect = 7;
inline void OptionsRequest::clear_kill_process_on_disconnect() {
  _impl_.kill_process_on_disconnect_ = false;
}
inline bool OptionsRequest::_internal_kill_process_on_disconnect() const {
  return _impl_.kill_process_on_disconnect_;
}
inline bool OptionsRequest::kill_process_on_disconnect() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.OptionsRequest.kill_process_on_disconnect)
  return _internal_kill_process_on_disconnect();
}
inline void OptionsRequest::_internal_set_kill_process_on_disconnect(bool value) {
  
  _impl_.kill_process_on_disconnect_ = value;
}
inline void OptionsRequest::set_kill_process_on_disconnect(bool value) {
  _internal_set_kill_process_on_disconnect(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.OptionsRequest.kill_process_on_disconnect)
}

// string symbol_path = 8;
inline void OptionsRequest::clear_symbol_path() {
  _impl_.symbol_path_.ClearToEmpty();
}
inline const std::string& OptionsRequest::symbol_path() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.OptionsRequest.symbol_path)
  return _internal_symbol_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionsRequest::set_symbol_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.symbol_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.OptionsRequest.symbol_path)
}
inline std::string* OptionsRequest::mutable_symbol_path() {
  std::string* _s = _internal_mutable_symbol_path();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.OptionsRequest.symbol_path)
  return _s;
}
inline const std::string& OptionsRequest::_internal_symbol_path() const {
  return _impl_.symbol_path_.Get();
}
inline void OptionsRequest::_internal_set_symbol_path(const std::string& value) {
  
  _impl_.symbol_path_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionsRequest::_internal_mutable_symbol_path() {
  
  return _impl_.symbol_path_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionsRequest::release_symbol_path() {
  // @@protoc_insertion_point(field_release:TED.Grpc.OptionsRequest.symbol_path)
  return _impl_.symbol_path_.Release();
}
inline void OptionsRequest::set_allocated_symbol_path(std::string* symbol_path) {
  if (symbol_path != nullptr) {
    
  } else {
    
  }
  _impl_.symbol_path_.SetAllocated(symbol_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.symbol_path_.IsDefault()) {
    _impl_.symbol_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.OptionsRequest.symbol_path)
}

// -------------------------------------------------------------------

// DisassembleAddressRequest

// uint64 address = 1;
inline void DisassembleAddressRequest::clear_address() {
  _impl_.address_ = uint64_t{0u};
}
inline uint64_t DisassembleAddressRequest::_internal_address() const {
  return _impl_.address_;
}
inline uint64_t DisassembleAddressRequest::address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DisassembleAddressRequest.address)
  return _internal_address();
}
inline void DisassembleAddressRequest::_internal_set_address(uint64_t value) {
  
  _impl_.address_ = value;
}
inline void DisassembleAddressRequest::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.DisassembleAddressRequest.address)
}

// uint32 size = 2;
inline void DisassembleAddressRequest::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t DisassembleAddressRequest::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t DisassembleAddressRequest::size() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DisassembleAddressRequest.size)
  return _internal_size();
}
inline void DisassembleAddressRequest::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void DisassembleAddressRequest::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.DisassembleAddressRequest.size)
}

// -------------------------------------------------------------------

// Instruction

// uint64 address = 1;
inline void Instruction::clear_address() {
  _impl_.address_ = uint64_t{0u};
}
inline uint64_t Instruction::_internal_address() const {
  return _impl_.address_;
}
inline uint64_t Instruction::address() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.Instruction.address)
  return _internal_address();
}
inline void Instruction::_internal_set_address(uint64_t value) {
  
  _impl_.address_ = value;
}
inline void Instruction::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.Instruction.address)
}

// string mnemonic = 2;
inline void Instruction::clear_mnemonic() {
  _impl_.mnemonic_.ClearToEmpty();
}
inline const std::string& Instruction::mnemonic() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.Instruction.mnemonic)
  return _internal_mnemonic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Instruction::set_mnemonic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mnemonic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.Instruction.mnemonic)
}
inline std::string* Instruction::mutable_mnemonic() {
  std::string* _s = _internal_mutable_mnemonic();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.Instruction.mnemonic)
  return _s;
}
inline const std::string& Instruction::_internal_mnemonic() const {
  return _impl_.mnemonic_.Get();
}
inline void Instruction::_internal_set_mnemonic(const std::string& value) {
  
  _impl_.mnemonic_.Set(value, GetArenaForAllocation());
}
inline std::string* Instruction::_internal_mutable_mnemonic() {
  
  return _impl_.mnemonic_.Mutable(GetArenaForAllocation());
}
inline std::string* Instruction::release_mnemonic() {
  // @@protoc_insertion_point(field_release:TED.Grpc.Instruction.mnemonic)
  return _impl_.mnemonic_.Release();
}
inline void Instruction::set_allocated_mnemonic(std::string* mnemonic) {
  if (mnemonic != nullptr) {
    
  } else {
    
  }
  _impl_.mnemonic_.SetAllocated(mnemonic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mnemonic_.IsDefault()) {
    _impl_.mnemonic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.Instruction.mnemonic)
}

// string text = 3;
inline void Instruction::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Instruction::text() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.Instruction.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Instruction::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.Instruction.text)
}
inline std::string* Instruction::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.Instruction.text)
  return _s;
}
inline const std::string& Instruction::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Instruction::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Instruction::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Instruction::release_text() {
  // @@protoc_insertion_point(field_release:TED.Grpc.Instruction.text)
  return _impl_.text_.Release();
}
inline void Instruction::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.Instruction.text)
}

// bytes bytes = 4;
inline void Instruction::clear_bytes() {
  _impl_.bytes_.ClearToEmpty();
}
inline const std::string& Instruction::bytes() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.Instruction.bytes)
  return _internal_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Instruction::set_bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TED.Grpc.Instruction.bytes)
}
inline std::string* Instruction::mutable_bytes() {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:TED.Grpc.Instruction.bytes)
  return _s;
}
inline const std::string& Instruction::_internal_bytes() const {
  return _impl_.bytes_.Get();
}
inline void Instruction::_internal_set_bytes(const std::string& value) {
  
  _impl_.bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Instruction::_internal_mutable_bytes() {
  
  return _impl_.bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* Instruction::release_bytes() {
  // @@protoc_insertion_point(field_release:TED.Grpc.Instruction.bytes)
  return _impl_.bytes_.Release();
}
inline void Instruction::set_allocated_bytes(std::string* bytes) {
  if (bytes != nullptr) {
    
  } else {
    
  }
  _impl_.bytes_.SetAllocated(bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bytes_.IsDefault()) {
    _impl_.bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TED.Grpc.Instruction.bytes)
}

// -------------------------------------------------------------------

// DisassembleAddressResponse

// repeated .TED.Grpc.Instruction instructions = 1;
inline int DisassembleAddressResponse::_internal_instructions_size() const {
  return _impl_.instructions_.size();
}
inline int DisassembleAddressResponse::instructions_size() const {
  return _internal_instructions_size();
}
inline void DisassembleAddressResponse::clear_instructions() {
  _impl_.instructions_.Clear();
}
inline ::TED::Grpc::Instruction* DisassembleAddressResponse::mutable_instructions(int index) {
  // @@protoc_insertion_point(field_mutable:TED.Grpc.DisassembleAddressResponse.instructions)
  return _impl_.instructions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::Instruction >*
DisassembleAddressResponse::mutable_instructions() {
  // @@protoc_insertion_point(field_mutable_list:TED.Grpc.DisassembleAddressResponse.instructions)
  return &_impl_.instructions_;
}
inline const ::TED::Grpc::Instruction& DisassembleAddressResponse::_internal_instructions(int index) const {
  return _impl_.instructions_.Get(index);
}
inline const ::TED::Grpc::Instruction& DisassembleAddressResponse::instructions(int index) const {
  // @@protoc_insertion_point(field_get:TED.Grpc.DisassembleAddressResponse.instructions)
  return _internal_instructions(index);
}
inline ::TED::Grpc::Instruction* DisassembleAddressResponse::_internal_add_instructions() {
  return _impl_.instructions_.Add();
}
inline ::TED::Grpc::Instruction* DisassembleAddressResponse::add_instructions() {
  ::TED::Grpc::Instruction* _add = _internal_add_instructions();
  // @@protoc_insertion_point(field_add:TED.Grpc.DisassembleAddressResponse.instructions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TED::Grpc::Instruction >&
DisassembleAddressResponse::instructions() const {
  // @@protoc_insertion_point(field_list:TED.Grpc.DisassembleAddressResponse.instructions)
  return _impl_.instructions_;
}

// -------------------------------------------------------------------

// GenericResponse

// bool success = 1;
inline void GenericResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GenericResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool GenericResponse::success() const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GenericResponse.success)
  return _internal_success();
}
inline void GenericResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GenericResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GenericResponse.success)
}

// repeated uint32 last_error_code = 2;
inline int GenericResponse::_internal_last_error_code_size() const {
  return _impl_.last_error_code_.size();
}
inline int GenericResponse::last_error_code_size() const {
  return _internal_last_error_code_size();
}
inline void GenericResponse::clear_last_error_code() {
  _impl_.last_error_code_.Clear();
}
inline uint32_t GenericResponse::_internal_last_error_code(int index) const {
  return _impl_.last_error_code_.Get(index);
}
inline uint32_t GenericResponse::last_error_code(int index) const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GenericResponse.last_error_code)
  return _internal_last_error_code(index);
}
inline void GenericResponse::set_last_error_code(int index, uint32_t value) {
  _impl_.last_error_code_.Set(index, value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GenericResponse.last_error_code)
}
inline void GenericResponse::_internal_add_last_error_code(uint32_t value) {
  _impl_.last_error_code_.Add(value);
}
inline void GenericResponse::add_last_error_code(uint32_t value) {
  _internal_add_last_error_code(value);
  // @@protoc_insertion_point(field_add:TED.Grpc.GenericResponse.last_error_code)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GenericResponse::_internal_last_error_code() const {
  return _impl_.last_error_code_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GenericResponse::last_error_code() const {
  // @@protoc_insertion_point(field_list:TED.Grpc.GenericResponse.last_error_code)
  return _internal_last_error_code();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GenericResponse::_internal_mutable_last_error_code() {
  return &_impl_.last_error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GenericResponse::mutable_last_error_code() {
  // @@protoc_insertion_point(field_mutable_list:TED.Grpc.GenericResponse.last_error_code)
  return _internal_mutable_last_error_code();
}

// repeated string error_message = 3;
inline int GenericResponse::_internal_error_message_size() const {
  return _impl_.error_message_.size();
}
inline int GenericResponse::error_message_size() const {
  return _internal_error_message_size();
}
inline void GenericResponse::clear_error_message() {
  _impl_.error_message_.Clear();
}
inline std::string* GenericResponse::add_error_message() {
  std::string* _s = _internal_add_error_message();
  // @@protoc_insertion_point(field_add_mutable:TED.Grpc.GenericResponse.error_message)
  return _s;
}
inline const std::string& GenericResponse::_internal_error_message(int index) const {
  return _impl_.error_message_.Get(index);
}
inline const std::string& GenericResponse::error_message(int index) const {
  // @@protoc_insertion_point(field_get:TED.Grpc.GenericResponse.error_message)
  return _internal_error_message(index);
}
inline std::string* GenericResponse::mutable_error_message(int index) {
  // @@protoc_insertion_point(field_mutable:TED.Grpc.GenericResponse.error_message)
  return _impl_.error_message_.Mutable(index);
}
inline void GenericResponse::set_error_message(int index, const std::string& value) {
  _impl_.error_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TED.Grpc.GenericResponse.error_message)
}
inline void GenericResponse::set_error_message(int index, std::string&& value) {
  _impl_.error_message_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TED.Grpc.GenericResponse.error_message)
}
inline void GenericResponse::set_error_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.error_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TED.Grpc.GenericResponse.error_message)
}
inline void GenericResponse::set_error_message(int index, const char* value, size_t size) {
  _impl_.error_message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TED.Grpc.GenericResponse.error_message)
}
inline std::string* GenericResponse::_internal_add_error_message() {
  return _impl_.error_message_.Add();
}
inline void GenericResponse::add_error_message(const std::string& value) {
  _impl_.error_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TED.Grpc.GenericResponse.error_message)
}
inline void GenericResponse::add_error_message(std::string&& value) {
  _impl_.error_message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TED.Grpc.GenericResponse.error_message)
}
inline void GenericResponse::add_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.error_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TED.Grpc.GenericResponse.error_message)
}
inline void GenericResponse::add_error_message(const char* value, size_t size) {
  _impl_.error_message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TED.Grpc.GenericResponse.error_message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenericResponse::error_message() const {
  // @@protoc_insertion_point(field_list:TED.Grpc.GenericResponse.error_message)
  return _impl_.error_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenericResponse::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable_list:TED.Grpc.GenericResponse.error_message)
  return &_impl_.error_message_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace TED

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TED_2eproto
