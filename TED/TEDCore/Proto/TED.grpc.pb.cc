// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: TED.proto

#include "TED.pb.h"
#include "TED.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace TED {
namespace Grpc {

static const char* TEDService_method_names[] = {
  "/TED.Grpc.TEDService/GetBreakpoints",
  "/TED.Grpc.TEDService/GetModules",
  "/TED.Grpc.TEDService/EnableBreakAllCallsInModule",
  "/TED.Grpc.TEDService/DisableBreakAllCallsInModule",
  "/TED.Grpc.TEDService/EnableBreakCallByAddress",
  "/TED.Grpc.TEDService/DisableBreakCallByAddress",
  "/TED.Grpc.TEDService/EnableBreakCallByName",
  "/TED.Grpc.TEDService/DisableBreakCallByName",
  "/TED.Grpc.TEDService/EnableBreakpointByAddress",
  "/TED.Grpc.TEDService/DisableBreakpointByAddress",
  "/TED.Grpc.TEDService/EnableBreakpointByName",
  "/TED.Grpc.TEDService/DisableBreakpointByName",
  "/TED.Grpc.TEDService/DisassembleAddress",
  "/TED.Grpc.TEDService/LoadModule",
  "/TED.Grpc.TEDService/UnloadModule",
  "/TED.Grpc.TEDService/ReadMemory",
  "/TED.Grpc.TEDService/WriteMemory",
  "/TED.Grpc.TEDService/CreateConsole",
  "/TED.Grpc.TEDService/DestroyConsole",
  "/TED.Grpc.TEDService/EnableInternalLogging",
  "/TED.Grpc.TEDService/DisableInternalLogging",
  "/TED.Grpc.TEDService/Options",
  "/TED.Grpc.TEDService/TestFunction",
};

std::unique_ptr< TEDService::Stub> TEDService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TEDService::Stub> stub(new TEDService::Stub(channel, options));
  return stub;
}

TEDService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBreakpoints_(TEDService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetModules_(TEDService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnableBreakAllCallsInModule_(TEDService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisableBreakAllCallsInModule_(TEDService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnableBreakCallByAddress_(TEDService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisableBreakCallByAddress_(TEDService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnableBreakCallByName_(TEDService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisableBreakCallByName_(TEDService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnableBreakpointByAddress_(TEDService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisableBreakpointByAddress_(TEDService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnableBreakpointByName_(TEDService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisableBreakpointByName_(TEDService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisassembleAddress_(TEDService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadModule_(TEDService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnloadModule_(TEDService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadMemory_(TEDService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteMemory_(TEDService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateConsole_(TEDService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyConsole_(TEDService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnableInternalLogging_(TEDService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisableInternalLogging_(TEDService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Options_(TEDService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestFunction_(TEDService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::TED::Grpc::BreakpointResponse>* TEDService::Stub::GetBreakpointsRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::TED::Grpc::BreakpointResponse>::Create(channel_.get(), rpcmethod_GetBreakpoints_, context, request);
}

void TEDService::Stub::async::GetBreakpoints(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::grpc::ClientReadReactor< ::TED::Grpc::BreakpointResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::TED::Grpc::BreakpointResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetBreakpoints_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::TED::Grpc::BreakpointResponse>* TEDService::Stub::AsyncGetBreakpointsRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TED::Grpc::BreakpointResponse>::Create(channel_.get(), cq, rpcmethod_GetBreakpoints_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::TED::Grpc::BreakpointResponse>* TEDService::Stub::PrepareAsyncGetBreakpointsRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::TED::Grpc::BreakpointResponse>::Create(channel_.get(), cq, rpcmethod_GetBreakpoints_, context, request, false, nullptr);
}

::grpc::Status TEDService::Stub::GetModules(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::TED::Grpc::GetModulesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::Empty, ::TED::Grpc::GetModulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModules_, context, request, response);
}

void TEDService::Stub::async::GetModules(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GetModulesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::Empty, ::TED::Grpc::GetModulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModules_, context, request, response, std::move(f));
}

void TEDService::Stub::async::GetModules(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GetModulesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModules_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GetModulesResponse>* TEDService::Stub::PrepareAsyncGetModulesRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GetModulesResponse, ::TED::Grpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModules_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GetModulesResponse>* TEDService::Stub::AsyncGetModulesRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModulesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::EnableBreakAllCallsInModule(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakAllCallsInModuleRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::EnableBreakAllCallsInModuleRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnableBreakAllCallsInModule_, context, request, response);
}

void TEDService::Stub::async::EnableBreakAllCallsInModule(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakAllCallsInModuleRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::EnableBreakAllCallsInModuleRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableBreakAllCallsInModule_, context, request, response, std::move(f));
}

void TEDService::Stub::async::EnableBreakAllCallsInModule(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakAllCallsInModuleRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableBreakAllCallsInModule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncEnableBreakAllCallsInModuleRaw(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakAllCallsInModuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::EnableBreakAllCallsInModuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnableBreakAllCallsInModule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncEnableBreakAllCallsInModuleRaw(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakAllCallsInModuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableBreakAllCallsInModuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::DisableBreakAllCallsInModule(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakAllCallsInModuleRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::DisableBreakAllCallsInModuleRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisableBreakAllCallsInModule_, context, request, response);
}

void TEDService::Stub::async::DisableBreakAllCallsInModule(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakAllCallsInModuleRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::DisableBreakAllCallsInModuleRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableBreakAllCallsInModule_, context, request, response, std::move(f));
}

void TEDService::Stub::async::DisableBreakAllCallsInModule(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakAllCallsInModuleRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableBreakAllCallsInModule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncDisableBreakAllCallsInModuleRaw(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakAllCallsInModuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::DisableBreakAllCallsInModuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisableBreakAllCallsInModule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncDisableBreakAllCallsInModuleRaw(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakAllCallsInModuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableBreakAllCallsInModuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::EnableBreakCallByAddress(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakCallByAddressRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::EnableBreakCallByAddressRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnableBreakCallByAddress_, context, request, response);
}

void TEDService::Stub::async::EnableBreakCallByAddress(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakCallByAddressRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::EnableBreakCallByAddressRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableBreakCallByAddress_, context, request, response, std::move(f));
}

void TEDService::Stub::async::EnableBreakCallByAddress(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakCallByAddressRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableBreakCallByAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncEnableBreakCallByAddressRaw(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakCallByAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::EnableBreakCallByAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnableBreakCallByAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncEnableBreakCallByAddressRaw(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakCallByAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableBreakCallByAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::DisableBreakCallByAddress(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakCallByAddressRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::DisableBreakCallByAddressRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisableBreakCallByAddress_, context, request, response);
}

void TEDService::Stub::async::DisableBreakCallByAddress(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakCallByAddressRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::DisableBreakCallByAddressRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableBreakCallByAddress_, context, request, response, std::move(f));
}

void TEDService::Stub::async::DisableBreakCallByAddress(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakCallByAddressRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableBreakCallByAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncDisableBreakCallByAddressRaw(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakCallByAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::DisableBreakCallByAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisableBreakCallByAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncDisableBreakCallByAddressRaw(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakCallByAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableBreakCallByAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::EnableBreakCallByName(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakCallByNameRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::EnableBreakCallByNameRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnableBreakCallByName_, context, request, response);
}

void TEDService::Stub::async::EnableBreakCallByName(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakCallByNameRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::EnableBreakCallByNameRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableBreakCallByName_, context, request, response, std::move(f));
}

void TEDService::Stub::async::EnableBreakCallByName(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakCallByNameRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableBreakCallByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncEnableBreakCallByNameRaw(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakCallByNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::EnableBreakCallByNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnableBreakCallByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncEnableBreakCallByNameRaw(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakCallByNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableBreakCallByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::DisableBreakCallByName(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakCallByNameRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::DisableBreakCallByNameRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisableBreakCallByName_, context, request, response);
}

void TEDService::Stub::async::DisableBreakCallByName(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakCallByNameRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::DisableBreakCallByNameRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableBreakCallByName_, context, request, response, std::move(f));
}

void TEDService::Stub::async::DisableBreakCallByName(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakCallByNameRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableBreakCallByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncDisableBreakCallByNameRaw(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakCallByNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::DisableBreakCallByNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisableBreakCallByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncDisableBreakCallByNameRaw(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakCallByNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableBreakCallByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::EnableBreakpointByAddress(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakpointByAddressRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::EnableBreakpointByAddressRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnableBreakpointByAddress_, context, request, response);
}

void TEDService::Stub::async::EnableBreakpointByAddress(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakpointByAddressRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::EnableBreakpointByAddressRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableBreakpointByAddress_, context, request, response, std::move(f));
}

void TEDService::Stub::async::EnableBreakpointByAddress(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakpointByAddressRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableBreakpointByAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncEnableBreakpointByAddressRaw(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakpointByAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::EnableBreakpointByAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnableBreakpointByAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncEnableBreakpointByAddressRaw(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakpointByAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableBreakpointByAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::DisableBreakpointByAddress(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakpointByAddressRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::DisableBreakpointByAddressRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisableBreakpointByAddress_, context, request, response);
}

void TEDService::Stub::async::DisableBreakpointByAddress(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakpointByAddressRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::DisableBreakpointByAddressRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableBreakpointByAddress_, context, request, response, std::move(f));
}

void TEDService::Stub::async::DisableBreakpointByAddress(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakpointByAddressRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableBreakpointByAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncDisableBreakpointByAddressRaw(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakpointByAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::DisableBreakpointByAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisableBreakpointByAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncDisableBreakpointByAddressRaw(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakpointByAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableBreakpointByAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::EnableBreakpointByName(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakpointByNameRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::EnableBreakpointByNameRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnableBreakpointByName_, context, request, response);
}

void TEDService::Stub::async::EnableBreakpointByName(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakpointByNameRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::EnableBreakpointByNameRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableBreakpointByName_, context, request, response, std::move(f));
}

void TEDService::Stub::async::EnableBreakpointByName(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakpointByNameRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableBreakpointByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncEnableBreakpointByNameRaw(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakpointByNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::EnableBreakpointByNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnableBreakpointByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncEnableBreakpointByNameRaw(::grpc::ClientContext* context, const ::TED::Grpc::EnableBreakpointByNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableBreakpointByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::DisableBreakpointByName(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakpointByNameRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::DisableBreakpointByNameRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisableBreakpointByName_, context, request, response);
}

void TEDService::Stub::async::DisableBreakpointByName(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakpointByNameRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::DisableBreakpointByNameRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableBreakpointByName_, context, request, response, std::move(f));
}

void TEDService::Stub::async::DisableBreakpointByName(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakpointByNameRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableBreakpointByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncDisableBreakpointByNameRaw(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakpointByNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::DisableBreakpointByNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisableBreakpointByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncDisableBreakpointByNameRaw(::grpc::ClientContext* context, const ::TED::Grpc::DisableBreakpointByNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableBreakpointByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::DisassembleAddress(::grpc::ClientContext* context, const ::TED::Grpc::DisassembleAddressRequest& request, ::TED::Grpc::DisassembleAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::DisassembleAddressRequest, ::TED::Grpc::DisassembleAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisassembleAddress_, context, request, response);
}

void TEDService::Stub::async::DisassembleAddress(::grpc::ClientContext* context, const ::TED::Grpc::DisassembleAddressRequest* request, ::TED::Grpc::DisassembleAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::DisassembleAddressRequest, ::TED::Grpc::DisassembleAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisassembleAddress_, context, request, response, std::move(f));
}

void TEDService::Stub::async::DisassembleAddress(::grpc::ClientContext* context, const ::TED::Grpc::DisassembleAddressRequest* request, ::TED::Grpc::DisassembleAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisassembleAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::DisassembleAddressResponse>* TEDService::Stub::PrepareAsyncDisassembleAddressRaw(::grpc::ClientContext* context, const ::TED::Grpc::DisassembleAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::DisassembleAddressResponse, ::TED::Grpc::DisassembleAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisassembleAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::DisassembleAddressResponse>* TEDService::Stub::AsyncDisassembleAddressRaw(::grpc::ClientContext* context, const ::TED::Grpc::DisassembleAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisassembleAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::LoadModule(::grpc::ClientContext* context, const ::TED::Grpc::LoadModuleRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::LoadModuleRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadModule_, context, request, response);
}

void TEDService::Stub::async::LoadModule(::grpc::ClientContext* context, const ::TED::Grpc::LoadModuleRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::LoadModuleRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadModule_, context, request, response, std::move(f));
}

void TEDService::Stub::async::LoadModule(::grpc::ClientContext* context, const ::TED::Grpc::LoadModuleRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadModule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncLoadModuleRaw(::grpc::ClientContext* context, const ::TED::Grpc::LoadModuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::LoadModuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadModule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncLoadModuleRaw(::grpc::ClientContext* context, const ::TED::Grpc::LoadModuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadModuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::UnloadModule(::grpc::ClientContext* context, const ::TED::Grpc::UnloadModuleRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::UnloadModuleRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnloadModule_, context, request, response);
}

void TEDService::Stub::async::UnloadModule(::grpc::ClientContext* context, const ::TED::Grpc::UnloadModuleRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::UnloadModuleRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnloadModule_, context, request, response, std::move(f));
}

void TEDService::Stub::async::UnloadModule(::grpc::ClientContext* context, const ::TED::Grpc::UnloadModuleRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnloadModule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncUnloadModuleRaw(::grpc::ClientContext* context, const ::TED::Grpc::UnloadModuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::UnloadModuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnloadModule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncUnloadModuleRaw(::grpc::ClientContext* context, const ::TED::Grpc::UnloadModuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnloadModuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::ReadMemory(::grpc::ClientContext* context, const ::TED::Grpc::ReadMemoryRequest& request, ::TED::Grpc::ReadMemoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::ReadMemoryRequest, ::TED::Grpc::ReadMemoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadMemory_, context, request, response);
}

void TEDService::Stub::async::ReadMemory(::grpc::ClientContext* context, const ::TED::Grpc::ReadMemoryRequest* request, ::TED::Grpc::ReadMemoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::ReadMemoryRequest, ::TED::Grpc::ReadMemoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadMemory_, context, request, response, std::move(f));
}

void TEDService::Stub::async::ReadMemory(::grpc::ClientContext* context, const ::TED::Grpc::ReadMemoryRequest* request, ::TED::Grpc::ReadMemoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::ReadMemoryResponse>* TEDService::Stub::PrepareAsyncReadMemoryRaw(::grpc::ClientContext* context, const ::TED::Grpc::ReadMemoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::ReadMemoryResponse, ::TED::Grpc::ReadMemoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::ReadMemoryResponse>* TEDService::Stub::AsyncReadMemoryRaw(::grpc::ClientContext* context, const ::TED::Grpc::ReadMemoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::WriteMemory(::grpc::ClientContext* context, const ::TED::Grpc::WriteMemoryRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::WriteMemoryRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteMemory_, context, request, response);
}

void TEDService::Stub::async::WriteMemory(::grpc::ClientContext* context, const ::TED::Grpc::WriteMemoryRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::WriteMemoryRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteMemory_, context, request, response, std::move(f));
}

void TEDService::Stub::async::WriteMemory(::grpc::ClientContext* context, const ::TED::Grpc::WriteMemoryRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncWriteMemoryRaw(::grpc::ClientContext* context, const ::TED::Grpc::WriteMemoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::WriteMemoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncWriteMemoryRaw(::grpc::ClientContext* context, const ::TED::Grpc::WriteMemoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::CreateConsole(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateConsole_, context, request, response);
}

void TEDService::Stub::async::CreateConsole(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateConsole_, context, request, response, std::move(f));
}

void TEDService::Stub::async::CreateConsole(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateConsole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncCreateConsoleRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateConsole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncCreateConsoleRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateConsoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::DestroyConsole(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyConsole_, context, request, response);
}

void TEDService::Stub::async::DestroyConsole(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyConsole_, context, request, response, std::move(f));
}

void TEDService::Stub::async::DestroyConsole(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyConsole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncDestroyConsoleRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyConsole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncDestroyConsoleRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyConsoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::EnableInternalLogging(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnableInternalLogging_, context, request, response);
}

void TEDService::Stub::async::EnableInternalLogging(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableInternalLogging_, context, request, response, std::move(f));
}

void TEDService::Stub::async::EnableInternalLogging(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableInternalLogging_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncEnableInternalLoggingRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnableInternalLogging_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncEnableInternalLoggingRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableInternalLoggingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::DisableInternalLogging(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisableInternalLogging_, context, request, response);
}

void TEDService::Stub::async::DisableInternalLogging(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableInternalLogging_, context, request, response, std::move(f));
}

void TEDService::Stub::async::DisableInternalLogging(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableInternalLogging_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncDisableInternalLoggingRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisableInternalLogging_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncDisableInternalLoggingRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableInternalLoggingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::Options(::grpc::ClientContext* context, const ::TED::Grpc::OptionsRequest& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::OptionsRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Options_, context, request, response);
}

void TEDService::Stub::async::Options(::grpc::ClientContext* context, const ::TED::Grpc::OptionsRequest* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::OptionsRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Options_, context, request, response, std::move(f));
}

void TEDService::Stub::async::Options(::grpc::ClientContext* context, const ::TED::Grpc::OptionsRequest* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Options_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncOptionsRaw(::grpc::ClientContext* context, const ::TED::Grpc::OptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::OptionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Options_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncOptionsRaw(::grpc::ClientContext* context, const ::TED::Grpc::OptionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOptionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TEDService::Stub::TestFunction(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::TED::Grpc::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TestFunction_, context, request, response);
}

void TEDService::Stub::async::TestFunction(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestFunction_, context, request, response, std::move(f));
}

void TEDService::Stub::async::TestFunction(::grpc::ClientContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestFunction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::PrepareAsyncTestFunctionRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TED::Grpc::GenericResponse, ::TED::Grpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TestFunction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TED::Grpc::GenericResponse>* TEDService::Stub::AsyncTestFunctionRaw(::grpc::ClientContext* context, const ::TED::Grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestFunctionRaw(context, request, cq);
  result->StartCall();
  return result;
}

TEDService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TEDService::Service, ::TED::Grpc::Empty, ::TED::Grpc::BreakpointResponse>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::Empty* req,
             ::grpc::ServerWriter<::TED::Grpc::BreakpointResponse>* writer) {
               return service->GetBreakpoints(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::Empty, ::TED::Grpc::GetModulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::Empty* req,
             ::TED::Grpc::GetModulesResponse* resp) {
               return service->GetModules(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::EnableBreakAllCallsInModuleRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::EnableBreakAllCallsInModuleRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->EnableBreakAllCallsInModule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::DisableBreakAllCallsInModuleRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::DisableBreakAllCallsInModuleRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->DisableBreakAllCallsInModule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::EnableBreakCallByAddressRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::EnableBreakCallByAddressRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->EnableBreakCallByAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::DisableBreakCallByAddressRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::DisableBreakCallByAddressRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->DisableBreakCallByAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::EnableBreakCallByNameRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::EnableBreakCallByNameRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->EnableBreakCallByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::DisableBreakCallByNameRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::DisableBreakCallByNameRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->DisableBreakCallByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::EnableBreakpointByAddressRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::EnableBreakpointByAddressRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->EnableBreakpointByAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::DisableBreakpointByAddressRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::DisableBreakpointByAddressRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->DisableBreakpointByAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::EnableBreakpointByNameRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::EnableBreakpointByNameRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->EnableBreakpointByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::DisableBreakpointByNameRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::DisableBreakpointByNameRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->DisableBreakpointByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::DisassembleAddressRequest, ::TED::Grpc::DisassembleAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::DisassembleAddressRequest* req,
             ::TED::Grpc::DisassembleAddressResponse* resp) {
               return service->DisassembleAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::LoadModuleRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::LoadModuleRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->LoadModule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::UnloadModuleRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::UnloadModuleRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->UnloadModule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::ReadMemoryRequest, ::TED::Grpc::ReadMemoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::ReadMemoryRequest* req,
             ::TED::Grpc::ReadMemoryResponse* resp) {
               return service->ReadMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::WriteMemoryRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::WriteMemoryRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->WriteMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::Empty* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->CreateConsole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::Empty* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->DestroyConsole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::Empty* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->EnableInternalLogging(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::Empty* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->DisableInternalLogging(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::OptionsRequest, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::OptionsRequest* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->Options(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TEDService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TEDService::Service, ::TED::Grpc::Empty, ::TED::Grpc::GenericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TEDService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TED::Grpc::Empty* req,
             ::TED::Grpc::GenericResponse* resp) {
               return service->TestFunction(ctx, req, resp);
             }, this)));
}

TEDService::Service::~Service() {
}

::grpc::Status TEDService::Service::GetBreakpoints(::grpc::ServerContext* context, const ::TED::Grpc::Empty* request, ::grpc::ServerWriter< ::TED::Grpc::BreakpointResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::GetModules(::grpc::ServerContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GetModulesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::EnableBreakAllCallsInModule(::grpc::ServerContext* context, const ::TED::Grpc::EnableBreakAllCallsInModuleRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::DisableBreakAllCallsInModule(::grpc::ServerContext* context, const ::TED::Grpc::DisableBreakAllCallsInModuleRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::EnableBreakCallByAddress(::grpc::ServerContext* context, const ::TED::Grpc::EnableBreakCallByAddressRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::DisableBreakCallByAddress(::grpc::ServerContext* context, const ::TED::Grpc::DisableBreakCallByAddressRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::EnableBreakCallByName(::grpc::ServerContext* context, const ::TED::Grpc::EnableBreakCallByNameRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::DisableBreakCallByName(::grpc::ServerContext* context, const ::TED::Grpc::DisableBreakCallByNameRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::EnableBreakpointByAddress(::grpc::ServerContext* context, const ::TED::Grpc::EnableBreakpointByAddressRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::DisableBreakpointByAddress(::grpc::ServerContext* context, const ::TED::Grpc::DisableBreakpointByAddressRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::EnableBreakpointByName(::grpc::ServerContext* context, const ::TED::Grpc::EnableBreakpointByNameRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::DisableBreakpointByName(::grpc::ServerContext* context, const ::TED::Grpc::DisableBreakpointByNameRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::DisassembleAddress(::grpc::ServerContext* context, const ::TED::Grpc::DisassembleAddressRequest* request, ::TED::Grpc::DisassembleAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::LoadModule(::grpc::ServerContext* context, const ::TED::Grpc::LoadModuleRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::UnloadModule(::grpc::ServerContext* context, const ::TED::Grpc::UnloadModuleRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::ReadMemory(::grpc::ServerContext* context, const ::TED::Grpc::ReadMemoryRequest* request, ::TED::Grpc::ReadMemoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::WriteMemory(::grpc::ServerContext* context, const ::TED::Grpc::WriteMemoryRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::CreateConsole(::grpc::ServerContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::DestroyConsole(::grpc::ServerContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::EnableInternalLogging(::grpc::ServerContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::DisableInternalLogging(::grpc::ServerContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::Options(::grpc::ServerContext* context, const ::TED::Grpc::OptionsRequest* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TEDService::Service::TestFunction(::grpc::ServerContext* context, const ::TED::Grpc::Empty* request, ::TED::Grpc::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TED
}  // namespace Grpc

